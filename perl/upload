#!/usr/bin/perl

# upload
# MIMAS Website Upload Pages and Processing
#
#######################################################
# Copyright 2003-2005 Leandro C. Hermida
# This code is part of MIMAS and is distributed under
# GNU Public License Version 2.
#######################################################
# $Id$

use strict;
use warnings;
# for cgi-bin scripts only
use lib '../libs';
use Archive::Tar;
use Archive::Zip qw(:ERROR_CODES :CONSTANTS);
use IO::File;
use FileHandle;
use IO::Zlib qw(:gzip_external 0);
use Fcntl qw(:DEFAULT :flock);
use MIMAS::DB;
use MIMAS::Web;
use MIMAS::Consts;
use MIMAS::Utils;
use MIMAS::SampleFileParser;
use MIMAS::Units;

use constant SINGLE_AGES => ('specified single', 'specified mean', 'specified median');
use constant RANGE_AGES => ('specified range');

main();
exit;

sub main {

my $mimas_db  = MIMAS::DB->new(-service => 'WEB');
my $mimas_web = MIMAS::Web->new();
my $params    = $mimas_web->cgi_Vars;
my $base      = MIMAS_SCRIPT_BASE;

## for testing
# print STDERR map("$_ ---> $params->{$_}\n", sort keys %{$params}), "\n";
##

#these numbers are linked to MIMAS_UPLOAD_*_PROGRESS in MIMAS::Consts
my $upload_web_pages = {
                         manage_uploads    => 0,
                         file_upload       => 1,  # these numbers are linked to the PROGRESS
                         sample_relations  => 2,
                         exp_info          => 3,
                         exp_permissions   => 4,
                         sample_attrs      => 4,
                         upload_summary    => 5,
                         upload_completed  => 5,
                         export_data       => 5,
                       };

#
## Authentication
#
unless (defined $params->{session_id}                                                             and 
        defined $mimas_web->session($mimas_db->Web->SessionAdaptor->fetch($params->{session_id})) and 
	defined $mimas_web->session->{login}) {
    print $mimas_web->cgi->redirect("$base/main?page=login&expired=1");
    exit;
}

#
## Web Page Check
#
unless (defined $params->{page} and defined $upload_web_pages->{$params->{page}}) {
    print $mimas_web->cgi->redirect("$base/upload?page=manage_uploads&session_id=$params->{session_id}");
    exit;
}

my $web_page   = $params->{page};
my $session_id = $mimas_web->session->{_session_id};
my $progress   = $upload_web_pages->{$web_page};

my $auth_user  = $mimas_db->User->UserAdaptor->select_by_dbID($mimas_web->session->{user_id});
my $edited_user= $auth_user;
my @css;

my @errors;
my $curation_mode = 0;
my $merge_mode = ($params->{action_type} || '') eq "show_merge";
my $overwrite_files = $params->{overwrite_files};

#allow curators to edit other users' uploads, or their own already curated experiments
if ($params->{edited_user}) {
	if ($auth_user->dbID eq $params->{edited_user}) {
	}
	elsif ($auth_user->is_curator) {
	$edited_user = $mimas_db->User->UserAdaptor->select_by_dbID($params->{edited_user});
        push @css, "/styles/curation.css?session_id=$session_id";
        $curation_mode = 1;
	}
	else {
	    push @errors, "Not authorized";
	}
}

my $is_germonline_manager = grep ({$_->name eq 'GermOnline managers'} values %{$auth_user->groups});

#
## Upload Authentication
#
my $experiment;

if (defined $params->{sample_id}) {
    my $sample = $mimas_db->Upload->SampleAdaptor->select_by_dbID($params->{sample_id});
    $mimas_web->session->{upload}->{experiment_id} = $sample->experiment->dbID if $sample;
}

if ($params->{page} ne 'manage_uploads' and $params->{page} ne 'export_data') {
    $mimas_web->error('Upload authentication failed!') unless defined $mimas_web->session->{upload}                  and
                                                              defined $mimas_web->session->{upload}->{experiment_id} and
                                                              (
                                                              $mimas_db->Upload->AuthAdaptor->auth_owner(-state         => MIMAS_UPLOAD_WORKING,
							                                                 -owner_id      => $mimas_web->session->{user_id},
							                                                 -experiment_id => $mimas_web->session->{upload}->{experiment_id})
                                                               or
                                                              $mimas_db->Upload->AuthAdaptor->auth_writer_state(-state         => MIMAS_UPLOAD_WORKING,
							                                                 -user_id       => $mimas_web->session->{user_id},
							                                                 -experiment_id => $mimas_web->session->{upload}->{experiment_id})
                                                               or
                                                              $auth_user->is_curator
                                                              );

    $experiment = $mimas_db->Upload->ExperimentAdaptor->select_by_dbID($mimas_web->session->{upload}->{experiment_id}) unless $web_page eq 'manage_uploads';

    if ($experiment->owner->dbID ne $auth_user->dbID and $auth_user->is_curator) {
        push @css, "/styles/curation.css?session_id=$session_id";
        $curation_mode = 1;
        $edited_user = $experiment->owner;
    }
}

if ($web_page eq 'file_upload') {
    $CGI::DISABLE_UPLOADS = 0;
    $CGI::POST_MAX        = MIMAS_UPLOAD_POST_MAX;
}

my $curation_log;
my $selected_array_id = $params->{selected_array_id};
my $force_probesets = $params->{force_probesets};


#
## POST processing & error checking (mirrors JavaScript error checking in case of JavaScript failure)
#
if ($mimas_web->cgi->request_method eq 'POST' and $mimas_web->http_referer =~ /^$base/) {
    #
    ## MANAGE UPLOADS: create experiment upload
    #
    if ($web_page eq 'manage_uploads' and defined $params->{experiment_name}) {
        my $experiments = $edited_user->experiments;
	
	$params->{experiment_name} = clean_whitespace($params->{experiment_name});
	push @errors, 'Blank experiment name!' if $params->{experiment_name} eq '';
        
	my %lc_exp_names = map { lc($_->name) => 1 } values %{$experiments};
	push @errors, "Experiment already exists with name '$params->{experiment_name}'" if $lc_exp_names{lc($params->{experiment_name})};
	
	# process create experiment upload if no errors
        unless (@errors) {
	    my $experiment_id;
	    eval {
	        # create experiment and set progress bar to beginning
                $experiment_id = $mimas_db->Upload->ExperimentAdaptor->store(-name            => $params->{experiment_name},
	                                                                     -num_hybrids     => undef,
					                                     -progress        => MIMAS_UPLOAD_MIN_PROGRESS,
						                             -state           => MIMAS_UPLOAD_WORKING,
					                                     -owner_id        => $edited_user->dbID);


                #create initial permissions
                my $groups = $mimas_db->User->GroupAdaptor->select_all_non_system();
                for my $group (values %$groups) {
                    my $can_read = $group->is_default_reader;
                    my $can_write = $group->is_default_writer;
                    if ($can_read || $can_write) {
                        $mimas_db->Upload->GroupExpPrivilegeAdaptor->store(
                            -group_id       => $group->dbID,
                            -experiment_id  => $experiment_id,
                            -can_write      => $can_write,
                        );
                    }
                }

	        # commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
	        # session processing
		$mimas_web->session->{upload}    = { experiment_id => $experiment_id };
		$mimas_web->session->{timestamp} = time;
		
		# after processing POST without errors redirect to "file_upload"
		print $mimas_web->cgi->redirect("$base/upload?page=file_upload&session_id=${session_id}");
		
		# store session
		$mimas_db->Web->SessionAdaptor->store($mimas_web->session);
		
		exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("MANAGE UPLOADS CREATE EXP transaction aborted:\n$@");
	    }
        }
    }
    #
    ## MANAGE UPLOADS: removal or renaming of experiment uploads
    #
    elsif ($web_page eq 'manage_uploads' and (defined $params->{remove_exps} or (defined $params->{rename_exps} and defined $params->{new_names}))) {
        my $experiments  = $edited_user->experiments;
	my $working_data = $edited_user->working_data;
	
	if (defined $params->{remove_exps}) {
            my @remove_exps = split /\0/, $params->{remove_exps};
            for my $experiment_id (@remove_exps) {
                push @errors, "Experiment ID: $experiment_id does not exist in MIMAS Upload Database!" unless defined $experiments->{$experiment_id};
            }
            
	    # process remove experiments if no errors
            unless (@errors) {
	        eval {
                    for my $experiment_id (@remove_exps) {
		        $mimas_db->Upload->ExperimentAdaptor->remove_by_dbID($experiment_id);
		    }
		    
		    if (defined $working_data and defined $working_data->{upload}) {
		        delete @{$working_data->{upload}}{@remove_exps};
			delete $working_data->{upload} unless %{$working_data->{upload}};
			$working_data = undef          unless %{$working_data};
			
			# update user working data
		        $mimas_db->User->UserAdaptor->update(-set        => [ -working_data => $working_data ],
		                                             -qualifiers => [ -user_id      => $edited_user->dbID   ]);
		    }
		    
		    # commit to DB
		    $mimas_db->commit();
		};
		
		if ($@) {
		    push @errors, MIMAS_DB_ERROR_MSG;
		    $mimas_db->warn("MANAGE UPLOADS REMOVE EXPS transaction aborted:\n$@");
		}
            }
	}
	
	if (defined $params->{rename_exps} and defined $params->{new_names}) {
	    s/\0{2,}/\0/g for $params->{rename_exps}, $params->{new_names};
	    my @rename_exps = split /\0/, $params->{rename_exps};
	    my @new_names   = split /\0/, $params->{new_names};
	    
	    push @errors, 'Error with experiment ID to new name association!' unless scalar @rename_exps == scalar @new_names;
            
	    my %lc_exp_names = map { lc($_->name) => 1 } values %{$experiments};
	    
	    for my $i (0 .. $#rename_exps) {
	        my $experiment_id = $rename_exps[$i];
		push @errors, "Invalid experiment ID: $experiment_id" unless defined $experiments->{$experiment_id};
		$new_names[$i] = clean_whitespace($new_names[$i]);
		push @errors, 'Blank experiment name!' unless $new_names[$i];
	        push @errors, "Experiment already exists with name '$new_names[$i]' !" if $lc_exp_names{lc($new_names[$i])};
	    }
	    
            # process rename experiments if no errors
	    unless (@errors) {
	        eval {
	            for my $i (0 .. $#rename_exps) {
		        my $experiment_id = $rename_exps[$i];
		        my $new_name      = $new_names[$i];
		        $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -name          => $new_name      ],
			                                             -qualifiers => [ -experiment_id => $experiment_id ]);
		    }
		    
		    # commit to DB
		    $mimas_db->commit();
		};
		
		if ($@) {
		    push @errors, MIMAS_DB_ERROR_MSG;
		    $mimas_db->warn("MANAGE UPLOADS RENAME EXPS transaction aborted:\n$@");
		}
	    }
	}
    
        unless (@errors) {
	    # after processing POST without errors recall page as GET
	    print $mimas_web->cgi->redirect("$base/upload?page=${web_page}&session_id=${session_id}&edited_user=@{[$edited_user->dbID]}");
	    exit;
	}
    }
    #
    ## FILE UPLOAD: upload archive or individual files
    #
    elsif ($web_page eq 'file_upload' and (defined $params->{uploaded_files})) {
        # check for global errors
        push @errors, 'Error transferring file(s): ' . $mimas_web->cgi->cgi_error if $mimas_web->cgi->cgi_error;
        # push @errors, 'Upload directory is full!' if dir_size(MIMAS_UPLOAD_DIR) + $ENV{CONTENT_LENGTH} > MIMAS_UPLOAD_MAX_DIR_SIZE;
	
	my @all_files;
	# archives or  individual files
	# Create a list of all submitted files, including those that were uncompressed from uploaded archives.
	# Parse and store the CEL files first, because they contain the name of the Array (necessary to
	# create the Sample object). The Sample object is necessary to validate RMA files.
	if ($params->{uploaded_files}) {
	    $params->{uploaded_files} =~ s/\0{2,}/\0/g;
            my @filenames   = split /\0/, $params->{uploaded_files};
            my @filehandles = $mimas_web->cgi->upload('uploaded_files');
	    if (scalar @filenames > MIMAS_UPLOAD_MAX_NUM_FILES or scalar @filehandles > MIMAS_UPLOAD_MAX_NUM_FILES) {
	        push @errors, "Number of files uploaded greater than maximum allowed (@{[MIMAS_UPLOAD_MAX_NUM_FILES]})!";
	    }
	    @all_files   = expand_archives(\@errors, \@filenames, \@filehandles);
	    #check again after all archives have been expanded
	    if (scalar @all_files > MIMAS_UPLOAD_MAX_NUM_FILES) {
	        push @errors, "Number of files uploaded greater than maximum allowed (@{[MIMAS_UPLOAD_MAX_NUM_FILES]})!";
	    }
	}

	unless (@all_files) {
	    push @errors, 'No file archive or individual files to upload!';
	}
	
        # check and process each file if no global or extraction errors
	unless (@errors) {
            # get database file information of already uploaded files in order to check for duplicates
	    my $files = $experiment->files;
	    my %lc_files;
	    $lc_files{lc $_->sample_file->file_name}++ for map {values %{$_->sample_to_files}} values %{$files};
	    my %lc_db_files;
	    $lc_db_files{lc $_->sample->name}{$_->format}++ for map {values %{$_->sample_to_files}} values %{$files};
	    undef $files;
	    
	    # error checking for valid file names and formats, duplicate files, bogus file paths
	    my %good_files;
            for my $filep (@all_files) {
		my ($filename, $fileh) = @$filep;
                $filename =~ s/^\s+//;
                $filename =~ s/\s+$//;
	        my ($name, $ext, @parse_errors) = parse_file_components($mimas_web, $filename);
		push @errors, @parse_errors;
	        ($ext) = $ext =~ /^\.(.+)$/;
		my $file_name = "$name.$ext";
	        $ext   = uc $ext;
	        my $lc_name = lc $name;
	        
	        CHECK: {
	          push(@errors, "Invalid file: $name"),                          last CHECK unless $ext;
	          push(@errors, "Invalid file: .$ext"),                          last CHECK unless $name;
	          push(@errors, "Invalid file type: $name.$ext"),                last CHECK unless grep {$_ eq $ext} @{+MIMAS_UPLOAD_VALID_FILE_EXTS};
	          push(@errors, "Duplicate file, already uploaded: $name.$ext"), last CHECK if  (   exists $good_files{$lc_name} and 
	                                                                                            exists $good_files{$lc_name}{$ext}
	                                                                                        or exists $lc_files{lc $file_name}
	                                                                                        or exists $lc_db_files{$lc_name} and 
	                                                                                            exists $lc_db_files{$lc_name}{$ext})
	                                                                                        and not $overwrite_files;
	          push(@errors, "File does not exist: $name.$ext"),              last CHECK unless -s $fileh;
	          
		  $good_files{$lc_name}{$ext} = [$name, $file_name, $fileh];
	        }
	        
            }
            
	    
            # process file upload of good files
	    my @new_files;
            for my $lc_name (sort ignoring_case keys %good_files) {
		#first store CEL files and create Sample objects
		my @cel_errors;
		if (exists $good_files{$lc_name}{CEL}) {
			my $ext = 'CEL';
			my ($name, $file_name, $fh) = @{$good_files{$lc_name}{$ext}};
			@cel_errors = store_file($mimas_db, $experiment, $name, $ext, $file_name, $fh, $selected_array_id, $force_probesets, $overwrite_files);
			push @new_files, "$name.$ext" unless @cel_errors;
			push @errors, @cel_errors;
		}

		for my $ext (sort keys %{$good_files{$lc_name}}) {
			next if $ext eq 'CEL';
			#can't store RMA, etc. files if CEL file upload has errors
			if (@cel_errors) {
				push @errors, "Didn't store $lc_name.$ext file because $lc_name.CEL file could not be stored";
				next;
			}
			my ($name, $file_name, $fh) = @{$good_files{$lc_name}{$ext}};
			my @store_errors = store_file($mimas_db, $experiment, $name, $ext, $file_name, $fh, $selected_array_id, $force_probesets, $overwrite_files);
			push @new_files, "$name.$ext" unless @store_errors;
			push @errors, map {"Error storing $name.$ext: $_"} @store_errors;
		}
	    }

	    if (@new_files and @errors) {
		push @errors, "The following files were successfully uploaded anyway: \n" . join "\n", sort {lc $a cmp lc $b} @new_files;
	    }

            
	    # if new files were uploaded then set progress bar to "sample_relations" regardless of where we have been before
	    if (@new_files) {
	        eval {
	            $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress      => $progress + 1     ],
	                                                         -qualifiers => [ -experiment_id => $experiment->dbID ]);
                    
                    # commit to DB
	            $mimas_db->commit();
	        };
	        
	        if ($@) {
	            push @errors, MIMAS_DB_ERROR_MSG;
	            $mimas_db->warn("FILE UPLOAD UPDATE PROGRESS transaction aborted:\n$@");
	        }
	    }
	    
	    # after processing POST without additional errors redirect to "sample_relations"
            unless (@errors) {
	        print $mimas_web->cgi->redirect("$base/upload?page=sample_relations&session_id=${session_id}");
	        exit;
            }
	}
    }
    #
    ## FILE UPLOAD: sample removal
    #
    elsif ($web_page eq 'file_upload' and ($params->{publish_germonline_input} or $params->{add_sample} or $params->{action_type} or defined $params->{remove_samples})) {
        if ($params->{publish_germonline_input} and $is_germonline_manager) {

            my @publish_germonline = split /\0/, $params->{publish_germonline};

            my $samples = $experiment->samples;
            $mimas_db->Upload->SampleToFileAdaptor->update (
                -set        => [ -is_germonline => 0 ],
                -qualifiers => [ -sample_id     => $_->dbID ],
            ) for values %$samples;

            for my $sample_to_file_id (@publish_germonline) {
                my $sample_to_file = $mimas_db->Upload->SampleToFileAdaptor->select_by_dbID($sample_to_file_id);
                next unless $experiment->dbID eq $sample_to_file->sample->experiment->dbID;
                $mimas_db->Upload->SampleToFileAdaptor->update (
                    -set        => [ -is_germonline  => 1 ],
                    -qualifiers => [ -sample_to_file_id => $sample_to_file_id ],
                );
            }
        }
        if ($params->{add_sample}) {
            my $samples = $experiment->samples;

            my $add_sample_name = $params->{add_sample};

# process sample add if no errors
            unless (@errors) {
                eval {
                    my $sample_id = $mimas_db->Upload->SampleAdaptor->store(
                            -name           => $add_sample_name,
                            -array_id       => undef,
                            -condition_id   => undef,
                            -experiment_id  => $experiment->dbID,
                            );

	                # if new files were uploaded then set progress bar to "sample_relations" regardless of where we have been before
                    $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress      => $progress + 1     ],
                            -qualifiers => [ -experiment_id => $experiment->dbID ]);
                    
                    # commit to DB
                    $mimas_db->commit();
                };

                unless ($@) {
                    # after processing POST without errors recall page as GET
                    print $mimas_web->cgi->redirect("$base/upload?page=${web_page}&session_id=${session_id}");
                    exit;
                } else {
                    push @errors, MIMAS_DB_ERROR_MSG;
                    $mimas_db->warn("FILE UPLOAD ADD SAMPLE transaction aborted:\n$@");
                }
            }
        }
        if ($params->{action_type} eq "merge_samples") {
            my $samples = $experiment->samples;
            eval {
                my %merged;
                for my $sample (values %{$samples}) {
                    next if $merged{$sample->dbID};
                    my $sample2_id = $params->{'merge_' . $sample->dbID};
                    my $sample2 = $samples->{$sample2_id};
                    if (defined $sample2) {
                        $merged{$sample2->dbID}++;
                        #merge step 1: transfer data
                        for my $sample_to_file (values %{$sample->sample_to_files || {}}) {
                            $mimas_db->Upload->SampleToFileAdaptor->update (
                                    -set        => [ -sample_id  => $sample2->dbID ],
                                    -qualifiers => [ -sample_to_file_id => $sample_to_file->dbID ],
                                    );
                        }
                        my $array = $sample2->array || $sample->array || undef;
                        if ($array) {
                            $mimas_db->Upload->SampleAdaptor->update (
                                    -set        => [ -array_id  => $array->dbID ],
                                    -qualifiers => [ -sample_id => $sample2->dbID ],
                                    );
                        }
                        #merge step 2: delete sample
                        $mimas_db->Upload->SampleAdaptor->remove_by_dbID($sample->dbID);
                    }
                }

                # commit to DB
                $mimas_db->commit();
            };

            unless ($@) {
                # after processing POST without errors recall page as GET
                print $mimas_web->cgi->redirect("$base/upload?page=${web_page}&session_id=${session_id}");
                exit;
            } else {
                push @errors, MIMAS_DB_ERROR_MSG;
                $mimas_db->warn("FILE UPLOAD MERGE SAMPLES transaction aborted:\n$@");
            }
        }
        if (defined $params->{remove_samples}) {
        my $samples = $experiment->samples;
	
	my @remove_samples = split /\0/, $params->{remove_samples};
	
	for my $sample_id (@remove_samples) {
	    push @errors, "Sample ID: $sample_id does not exist in MIMAS Upload Database!" unless defined $samples->{$sample_id};
	}
	
	# process sample removal if no errors
        unless (@errors) {
	    eval {
	        $mimas_db->Upload->SampleAdaptor->remove_by_dbID($_) for @remove_samples;
		
		# if all samples were deleted set progress to this page "file_upload"
		# else if any samples were deleted set progress to "sample_relations" if we have already been there or further
		my $progress = scalar @remove_samples == scalar keys %{$samples} ? $progress     :
		               $experiment->progress > $progress + 1             ? $progress + 1 : $experiment->progress;
		
		$mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress      => $progress         ],
	                                                     -qualifiers => [ -experiment_id => $experiment->dbID ]);
		
		# commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
	        # after processing POST without errors recall page as GET
	        print $mimas_web->cgi->redirect("$base/upload?page=${web_page}&session_id=${session_id}");
	        exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("FILE UPLOAD REMOVE SAMPLES transaction aborted:\n$@");
	    }
        }
    }
    }
    #
    ## SAMPLE RELATIONSHIPS: experiment condition creation/renaming/reordering/deletion & array selection
    #
    elsif ($web_page eq 'sample_relations' and    not defined $params->{sample_ids} and defined $params->{condition_ids}) {
        my $conditions = $experiment->conditions;
	my $samples    = $experiment->samples;

	my @condition_ids = split /\0/, $params->{condition_ids};
	my %condition_ids;
        for my $condition_id (@condition_ids) {
	    $condition_ids{$condition_id}++;
	    if ($condition_id != 0) {
	        push @errors, "The experimental condition name '@{[$conditions->{$condition_id}->name]}' is duplicated!" if $condition_ids{$condition_id} > 1;
	        push @errors, "Invalid experimental condition ID: $condition_id" unless defined $conditions->{$condition_id};
	    }
        }

	
	my %db_condnames = map { lc($_->name) => 1 } values %{$conditions};
	
	my @new_condition_names;
	if (defined $params->{new_condition_names}) {
	    $params->{new_condition_names} =~ s/\0{2,}/\0/g;
	    @new_condition_names = split /\0/, $params->{new_condition_names};
	    push @errors, 'New exp condition creation error!' unless defined $condition_ids{0} and scalar @new_condition_names == $condition_ids{0};
	    for my $new_condition_name (@new_condition_names) { 
	        $new_condition_name = clean_whitespace($new_condition_name);
		push @errors, 'Blank new experimental condition name!' unless $new_condition_name;
		push @errors, "Experimental condition name already exists with name '$new_condition_name' !" if $db_condnames{$new_condition_name};
	    }
	}
	
	my %rename_conditions;
	if (defined $params->{rename_conditions} and defined $params->{new_names}) {
	    s/\0{2,}/\0/g for $params->{rename_conditions}, $params->{new_names};
	    my @rename_conditions = split /\0/, $params->{rename_conditions};
	    my @new_names         = split /\0/, $params->{new_names};
	    push @errors, 'Rename experimental condition error!' unless scalar @rename_conditions == scalar @new_names;
	    for my $i (0 .. $#rename_conditions) {
	        my $condition_id = $rename_conditions[$i];
		push @errors, "Invalid rename experimental condition ID: $condition_id" unless defined $conditions->{$condition_id};
		$new_names[$i] = clean_whitespace($new_names[$i]);
		push @errors, 'Blank renamed experiment condition name!' unless $new_names[$i];
        unless (lc $conditions->{$condition_id}->name  eq lc $new_names[$i]) {
	        push @errors, "Experimental condition name already exists with name '$new_names[$i]' !" if $db_condnames{$new_names[$i]};
        }
		$rename_conditions{$condition_id} = $new_names[$i];
	    }
	}
	
	# process experiment condition names & array if no errors
	unless (@errors) {
	    eval {
	        my $attributes = $mimas_db->Library->AttributeAdaptor->select_all_attrs();
		%{$attributes} = map { $_->name => $_ } values %{$attributes};
		
		# obtain "Reference Experimental Condition" value from experimental attributes
		my $ref_condition_name;
		my $exp_attributes = $experiment->attributes;
		for my $exp_attribute (values %{$exp_attributes}) {
		    if ($exp_attribute->attribute->is_attribute and lc($exp_attribute->attribute->name) eq 'reference experimental condition') {
		        $ref_condition_name = $exp_attribute->char_value;
			last;
		    }
		}
		
		my $change;
                
	        for my $condition_id (keys %{$conditions}) {
	            unless ($condition_ids{$condition_id}) {
		        $mimas_db->Upload->ExpConditionAdaptor->remove_by_dbID($condition_id);
		        for my $sample (values %{$samples}) {
		            $mimas_db->Upload->SampleAdaptor->update(-set        => [ -condition_id   => undef         ],
							             -qualifiers => [ -sample_id      => $sample->dbID ]) if defined $sample->condition and 
							                                                                     $sample->condition->dbID == $condition_id;
		        }
		        $change++;
		    }
	        }
	        
	        for my $i (0 .. $#condition_ids) {
	            # new experimental condition
		    if ($condition_ids[$i] == 0) {
		        my $new_condition_name = shift @new_condition_names; 
		        my $condition_id       = $mimas_db->Upload->ExpConditionAdaptor->store(-name          => $new_condition_name,
		                                                                               -display_order => $i + 1,
							                                       -experiment_id => $experiment->dbID,
							                                       -color         => undef);
		        $change++;
		    }
		    # rename existing experimental condition
		    else {
		        my $old_condition_name = $conditions->{$condition_ids[$i]}->name;
			my $new_condition_name = defined $rename_conditions{$condition_ids[$i]}
			                           ? $rename_conditions{$condition_ids[$i]} 
		                                   : $old_condition_name;
		        
		        $mimas_db->Upload->ExpConditionAdaptor->update(-set        => [ -name          => $new_condition_name,
		                                                                        -display_order => $i + 1             ],
							               -qualifiers => [ -condition_id  => $condition_ids[$i] ]);
                        
			# need to update "Reference Experimental Condition" experimental attribute value if the condition we
			# renamed was selected as the reference experimental condition
			if (defined $ref_condition_name and $ref_condition_name eq $old_condition_name) {
			    $mimas_db->Upload->ExpAttributeAdaptor->update(-set        => [ -char_value    => $new_condition_name ],
			                                                   -qualifiers => [ -attribute_id  => $attributes->{'Reference Experimental Condition'}->dbID,
									                    -experiment_id => $experiment->dbID ]);
			}
		    }
	        }
	        
	        # set progress bar to "sample relationships" if there has been a change;
	        # update experiment array
	        my $progress = $change ? $progress : $experiment->progress;
	        $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress        => $progress ],
							     -qualifiers => [ -experiment_id   => $experiment->dbID          ]);
                
		# commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
                # after processing POST without errors recall page as GET
	        print $mimas_web->cgi->redirect("$base/upload?page=${web_page}&session_id=${session_id}");
	        exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("SAMPLE RELATIONS SETUP transaction aborted:\n$@");
	    }
	}
    }
    #
    ## SAMPLE RELATIONSHIPS: process sample relationships
    #
    elsif ($web_page eq 'sample_relations' and ((defined $params->{sample_ids} and defined $params->{condition_ids}) or defined $params->{autogenerate_conditions})) {
        my $conditions = $experiment->conditions;
        my $samples = $experiment->samples;
	
	s/\0{2,}/\0/g for $params->{condition_ids};
	my @condition_ids = split /\0/, $params->{condition_ids};
	my @sample_ids    = split /\0/, $params->{sample_ids};

        if ($params->{autogenerate_conditions} and !$conditions) {
            my $sample_names = orderedHash;
            for my $sample (sort {lc $a->name cmp lc $b->name} values %$samples) {
                $sample_names->{$sample->dbID} = $sample->name;
            }
            my $common_prefix_length;
            PREFIX: for (my $i=1; 1; $i++) {
                last PREFIX if %$samples < 2;
                my $prefix;
                for my $value (values %$sample_names) {
                    if (!defined $prefix) {
                        last PREFIX if $i > length $value;
                        $prefix = substr($value, 0, $i);
                    }
                    else {
                        last PREFIX if $prefix ne substr($value, 0, $i);
                    }
                }
                $common_prefix_length = $i;
            }

            @condition_ids = ();
            @sample_ids = ();
            my $i;
            for my $sample_id (keys %$sample_names) {
                my $name = $sample_names->{$sample_id};
                substr($name, 0, $common_prefix_length) = "" if  $common_prefix_length;
                my $condition_id       = $mimas_db->Upload->ExpConditionAdaptor->store(
                    -name          => $name,
                    -display_order => ++$i,
                    -experiment_id => $experiment->dbID,
                    -color         => undef,
                );
                push @condition_ids, $condition_id;
                push @sample_ids, $sample_id;
            }

        }
	
        push @errors, 'A experimental condition must be selected for every sample!' unless scalar @sample_ids == scalar @condition_ids;
	
	my %condition_ids = map { $_ => 1 } @condition_ids;
	my %condition_colors;
	for my $condition (sort { $a->display_order <=> $b->display_order } values %{$conditions}) {
	    push @errors, "No samples associated with experimental condition '@{[$condition->name]}'" unless $condition_ids{$condition->dbID};
	    my $color = uc clean_whitespace($params->{"color_@{[$condition->dbID]}"});
	    $color = undef unless $color;
	    push @errors, "Invalid color code" if defined $color and $color !~ /\A[A-F0-9]{3}([A-F0-9]{3})?\Z/;
	    $condition_colors{$condition->dbID} = $color;
	}
        
        # process sample relationships if no errors
        unless (@errors) {
	    eval {
	        my $attributes = $mimas_db->Library->AttributeAdaptor->select_all_attrs();
		%{$attributes} = map { $_->name => $_ } values %{$attributes};
		
		my %replicates;
	        $replicates{$condition_ids[$_]}++ for 0 .. $#sample_ids;
	        
	        for my $i (0 .. $#sample_ids) {
		    $mimas_db->Upload->SampleAdaptor->update(-set        => [ -condition_id   => $condition_ids[$i] ],
						             -qualifiers => [ -sample_id      => $sample_ids[$i]    ]);
                }

		# Experimental condition colors
		if ($params->{condition_colors}) {
		    for my $condition (sort { $a->display_order <=> $b->display_order } values %{$conditions}) {
			my $color = $condition_colors{$condition->dbID};
			$mimas_db->Upload->ExpConditionAdaptor->update(-set        => [ -color          => $color ],
				-qualifiers => [ -condition_id  => $condition->dbID ]);
		    }
		}

		    # the experiment attributes page also has field values that are generated by earlier pages but if changes are made to 
		    # any earlier page users are forced to manually resubmit the experiment attributes page (its only one page) and this
		    # propagates the new field values.
	        
	        my $progress = $experiment->progress <= $progress ? $progress + 1 : $experiment->progress;
	        $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -num_hybrids     => scalar @sample_ids,
		                                                              -progress        => $progress           ],
							     -qualifiers => [ -experiment_id   => $experiment->dbID   ]);
	        
		# commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
	        # after processing POST without errors redirect to "exp_info"
                my $page = $params->{autogenerate_conditions} ? "sample_relations" : "exp_info";
	        print $mimas_web->cgi->redirect("$base/upload?page=$page&session_id=${session_id}");
	        exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("SAMPLE RELATIONS PROCESSING transaction aborted:\n$@");
	    }
        }
    }
    #
    ## EXPERIMENT INFORMATION & SAMPLE ATTRIBUTES
    #
    elsif ($web_page eq 'exp_info' or ($web_page eq 'sample_attrs' and defined $params->{condition_id} and defined $params->{sample_id})) {
        my $attributes   = $mimas_db->Library->AttributeAdaptor->select_all_attrs_by_webpage($web_page eq 'exp_info' ? 'experiment information' : 'sample attributes');
	my $conditions   = $experiment->conditions;
	my $samples      = $experiment->samples;
	my $factors      = $experiment->factors;
	my $working_data = $edited_user->working_data;
	
	# authenticate sample & experimental condition if POSTing from "sample_attrs"
	if ($web_page eq 'sample_attrs') {
	    push @errors, 'Invalid sample and/or experimental condition!' unless defined $conditions->{$params->{condition_id}}          and
	                                                                         defined $conditions->{$params->{condition_id}}->samples and
	                                                                         defined $conditions->{$params->{condition_id}}->samples->{$params->{sample_id}};
            
	    # merge and remove factors selected which are also attributes (order is important: factors first, then attributes)
	    %{$attributes} = (%{$factors}, %{$attributes}) if defined $factors;
	}
	
	my $user_defined_factors;
	if (defined $working_data                                and
            defined $working_data->{upload}                      and
            defined $working_data->{upload}->{$experiment->dbID} and
            defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
            $user_defined_factors++;
        }
	
	# clean up & error check attributes data
	my ($age_single, $age_range, $min_age, $max_age);
	for my $attribute (sort by_order_then_name values %{$attributes}) {
	    if (defined $params->{"attr_values_@{[$attribute->dbID]}"} or defined $params->{"other_attr_values_@{[$attribute->dbID]}"}) {
	        # clean up attribute values and units
		if (defined $params->{"attr_values_@{[$attribute->dbID]}"}) {
		    if ($attribute->upload_form_type eq 'textarea') {
			$params->{"attr_values_@{[$attribute->dbID]}"} = clean_freetext($params->{"attr_values_@{[$attribute->dbID]}"});
                    } else {
			$params->{"attr_values_@{[$attribute->dbID]}"} = clean_whitespace($params->{"attr_values_@{[$attribute->dbID]}"});
                    }
		}
		if (defined $params->{"other_attr_values_@{[$attribute->dbID]}"}) {
		    my @other_values = split /\0/, $params->{"other_attr_values_@{[$attribute->dbID]}"};
                    for my $other_value (@other_values) { $other_value = clean_whitespace($other_value) }
                    $params->{"other_attr_values_@{[$attribute->dbID]}"} = join "\0", @other_values;
		}
		if (defined $params->{"attr_units_@{[$attribute->dbID]}"}) {
		    $params->{"attr_units_@{[$attribute->dbID]}"} = clean_whitespace($params->{"attr_units_@{[$attribute->dbID]}"});
		}
		if (defined $params->{"other_attr_units_@{[$attribute->dbID]}"}) {
                    $params->{"other_attr_units_@{[$attribute->dbID]}"} = clean_whitespace($params->{"other_attr_units_@{[$attribute->dbID]}"});
                }
                
		# check for required attributes
		if ($attribute->required eq 'required' and
		   (!defined $params->{"attr_values_@{[$attribute->dbID]}"}       or $params->{"attr_values_@{[$attribute->dbID]}"}       eq '') and
		   (!defined $params->{"other_attr_values_@{[$attribute->dbID]}"} or $params->{"other_attr_values_@{[$attribute->dbID]}"} eq '')) {
	            push @errors, "Attributes field '@{[$attribute->name]}' is required!";
	        }
		# check non-empty attribute fields
	        if ((defined $params->{"attr_values_@{[$attribute->dbID]}"} and $params->{"attr_values_@{[$attribute->dbID]}"} ne '') or
		     defined $params->{"other_attr_values_@{[$attribute->dbID]}"}) {
		    # numeric fields and unit select menus
		    if ($attribute->is_numeric) {
		        push @errors, "Attributes field '@{[$attribute->name]}' needs to be numeric!" unless is_numeric($params->{"attr_values_@{[$attribute->dbID]}"});
			if (defined $attribute->details) {
			    if (defined $params->{"attr_units_@{[$attribute->dbID]}"} or defined $params->{"other_attr_units_@{[$attribute->dbID]}"}) {
			        if ((!defined $params->{"attr_units_@{[$attribute->dbID]}"}       or $params->{"attr_units_@{[$attribute->dbID]}"}       eq '') and
				    (!defined $params->{"other_attr_units_@{[$attribute->dbID]}"} or $params->{"other_attr_units_@{[$attribute->dbID]}"} eq '')) {
			           push @errors, "Units missing for attributes field '@{[$attribute->name]}'!";
			        }
			        if (defined $params->{"other_attr_units_@{[$attribute->dbID]}"} and is_numeric($params->{"other_attr_units_@{[$attribute->dbID]}"})) {
		                    push @errors, "Units cannot be numeric in attributes field '@{[$attribute->name]}'!";
			        } elsif (!defined $attribute->details->{$params->{"attr_units_@{[$attribute->dbID]}"}}) {
				    push @errors, "Units error for attributes field '@{[$attribute->name]}'!";
			        }
		            } else {
			        push @errors, "Units missing for attributes field '@{[$attribute->name]}'!";
			    }
			}
		    }
		    # select menus and user-defined values
		    elsif ($attribute->upload_form_type =~ /^select/) {
		        if ($attribute->details and defined $params->{"attr_values_@{[$attribute->dbID]}"}) {
			    $params->{"attr_values_@{[$attribute->dbID]}"} =~ s/\0{2,}/\0/g;
			    my @attr_detail_ids = split /\0/, $params->{"attr_values_@{[$attribute->dbID]}"};
			    my %attr_detail_ids;
			    for my $i (reverse 0 .. $#attr_detail_ids) {
			        # remove "none/not applicable" entries
				if ($attr_detail_ids[$i] eq MIMAS_NONE_NA_OPTION) {
				    splice @attr_detail_ids, $i, 1;
				    next;
				}
				$attr_detail_ids{$attr_detail_ids[$i]}++;
				push @errors, "Attributes field '@{[$attribute->name]}' has duplicate selections!" if $attr_detail_ids{$attr_detail_ids[$i]} > 1;
				push @errors, "Attributes field '@{[$attribute->name]}' error!"                    if !defined $attribute->details->{$attr_detail_ids[$i]};
			    }
			    $params->{"attr_values_@{[$attribute->dbID]}"} = join "\0", @attr_detail_ids;
			}
			if (defined $params->{"other_attr_values_@{[$attribute->dbID]}"}) {
			    $params->{"other_attr_values_@{[$attribute->dbID]}"} =~ s/\0{2,}/\0/g;
			    my @other_details = split /\0/, $params->{"other_attr_values_@{[$attribute->dbID]}"};
			    my %lc_other_details;
			    for my $other_detail (@other_details) {
			        $lc_other_details{lc($other_detail)}++;
			        push @errors, "Attributes field '@{[$attribute->name]}' cannot be numeric!"        if is_numeric($other_detail);
				push @errors, "Attributes field '@{[$attribute->name]}' has duplicate selections!" if $lc_other_details{lc($other_detail)} > 1;
			    }
			}
		    }
	        }
		# special checks and flags for certain attributes (order of if statements is important -- so don't change!)
		if ($attribute->is_attribute and lc($attribute->name) eq 'age determination/type') {
		    if (defined $attribute->details->{$params->{"attr_values_@{[$attribute->dbID]}"}}) {
		        if (grep {lc($attribute->details->{$params->{"attr_values_@{[$attribute->dbID]}"}}->name) eq $_} SINGLE_AGES) {
		            $age_single++;
		        } elsif (grep {lc($attribute->details->{$params->{"attr_values_@{[$attribute->dbID]}"}}->name) eq $_} RANGE_AGES) {
		            $age_range++;
		        }
		    }
		} elsif ($attribute->is_attribute and lc($attribute->name) eq 'organism age') {
		    if ($age_single) {
		        if (defined $params->{"attr_values_@{[$attribute->dbID]}"}) {
			    push @errors, "Attributes field '@{[$attribute->name]}' needs to be numeric!" unless is_numeric($params->{"attr_values_@{[$attribute->dbID]}"});
			} else {
			    push @errors, "Attributes field '@{[$attribute->name]}' is required!";
			}
		    } else {
		        delete $params->{"attr_values_@{[$attribute->dbID]}"};
		    }
		} elsif ($attribute->is_attribute and lc($attribute->name) eq 'min organism age') {
		    if ($age_range) {
		        if (defined $params->{"attr_values_@{[$attribute->dbID]}"}) {
		            push @errors, "Attributes field '@{[$attribute->name]}' needs to be numeric!" unless is_numeric($params->{"attr_values_@{[$attribute->dbID]}"});
			    $min_age = $params->{"attr_values_@{[$attribute->dbID]}"};
		        } else {
		            push @errors, "Attributes field '@{[$attribute->name]}' is required!";
		        }
		    } else {
		        delete $params->{"attr_values_@{[$attribute->dbID]}"};
		    }
		} elsif ($attribute->is_attribute and lc($attribute->name) eq 'max organism age') {
		    if ($age_range) {
		        if (defined $params->{"attr_values_@{[$attribute->dbID]}"}) {
		            push @errors, "Attributes field '@{[$attribute->name]}' needs to be numeric!" unless is_numeric($params->{"attr_values_@{[$attribute->dbID]}"});
			    $max_age = $params->{"attr_values_@{[$attribute->dbID]}"};
			    push @errors, "Attributes field '@{[$attribute->name]}' has an invalid age range!" unless defined $min_age and defined $max_age and $min_age < $max_age;
		        } else {
		            push @errors, "Attributes field '@{[$attribute->name]}' is required!";
		        }
		    } else {
		        delete $params->{"attr_values_@{[$attribute->dbID]}"};
		    }
		} elsif ($attribute->is_attribute and lc($attribute->name) eq 'age initial time point') {
		    if ($age_single or $age_range) {
		        if ((!defined $params->{"attr_values_@{[$attribute->dbID]}"}       or $params->{"attr_values_@{[$attribute->dbID]}"}       eq '') and
		            (!defined $params->{"other_attr_values_@{[$attribute->dbID]}"} or $params->{"other_attr_values_@{[$attribute->dbID]}"} eq '')) {
			    push @errors, "Attributes field '@{[$attribute->name]}' is required!";
			}
		    } else {
		        delete $params->{"attr_values_@{[$attribute->dbID]}"};
		    }
		}
	    }
	    # taken out: non-required fields sometimes don't pass a parameter
	    # else {
	    #     push @errors, "Attributes field '@{[$attribute->name]}' is missing!";
	    # }
	}
        
	my $other_factors;
	if ($web_page eq 'exp_info') {
            # clean up & check possible new user-defined experimental factors (experiment information page)
	    if (defined $params->{other_factor_names}) {
                if (defined $params->{other_factor_is_numeric} and $params->{other_factor_unit_group_ids}) {
	            s/\0{2,}/\0/g for $params->{other_factor_names}, $params->{other_factor_is_numeric}, $params->{other_factor_unit_group_ids};
		    my @other_factor_names          = split /\0/, $params->{other_factor_names};
                    my @other_factor_is_numeric     = split /\0/, $params->{other_factor_is_numeric};
                    my @other_factor_unit_group_ids = split /\0/, $params->{other_factor_unit_group_ids};
		    push @errors, 'New experimental factor creation error!' unless scalar @other_factor_names == scalar @other_factor_is_numeric and 
		                                                                   scalar @other_factor_names == scalar @other_factor_unit_group_ids;
                    my %lc_other_factor_names;
		    for my $i (0 .. $#other_factor_names) {
		        $other_factor_names[$i] = clean_whitespace($other_factor_names[$i]);
		        push @errors, 'Blank experimental factor name!' if $other_factor_names[$i] eq '';
		        $lc_other_factor_names{lc($other_factor_names[$i])}++;
		        push @errors, "The new experimental factor '$other_factor_names[$i]' is duplicated!" if $lc_other_factor_names{lc($other_factor_names[$i])} > 1;
		        $other_factors->{$other_factor_names[$i]}->{is_numeric}    = $other_factor_is_numeric[$i];
		        $other_factors->{$other_factor_names[$i]}->{unit_group_id} = $other_factor_unit_group_ids[$i];
		    } 
	        } else {
	            push @errors, 'New experimental factor creation error!';
	        }
            }
	} else {
	    # clean up & check possible user-defined experimental factor details (sample attributes page)
	    if ($user_defined_factors) {
                for my $factor (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
	            if ($factor->{selected}) {
		        # clean up user-defined factor values and units
			if (defined $params->{"other_factor_values_$factor->{ID}"}) {
			    $params->{"other_factor_values_$factor->{ID}"} = clean_whitespace($params->{"other_factor_values_$factor->{ID}"});
			}
			if (defined $params->{"other_factor_units_$factor->{ID}"}) {
			    $params->{"other_factor_units_$factor->{ID}"}  = clean_whitespace($params->{"other_factor_units_$factor->{ID}"});
			}
			# check non-empty factor fields
			if (defined $params->{"other_factor_values_$factor->{ID}"} and $params->{"other_factor_values_$factor->{ID}"} ne '') {
			    if ($factor->{is_numeric}) {
			        push @errors, "Factor field '$factor->{name}' needs to be numeric!" unless is_numeric($params->{"other_factor_values_$factor->{ID}"});
				if (defined $factor->{units}) {
				    if (defined $params->{"other_factor_units_$factor->{ID}"} and $params->{"other_factor_units_$factor->{ID}"} ne '') {
				        if (!defined $factor->{units}->{$params->{"other_factor_units_$factor->{ID}"}}) {
					    push @errors, "Units error for factor field '$factor->{name}'!";
					}
				    } else {
				        push @errors, "Units missing for factor field '$factor->{name}'!";
				    }
				}
			    }
			}
		    }
	        }
            }
	}
	
	
	# process "exp_info" or "sample_attrs" if no errors
        unless (@errors) {
	    my $redirect;
            eval {
                # delete old data
		my ($adaptor, $foreign_key, @for_attr_db_target_ids, @for_factor_db_target_ids);
                if ($web_page eq 'exp_info') {
                    $adaptor     = 'ExpAttributeAdaptor';
                    $foreign_key = 'experiment_id';
                    
                    $mimas_db->Upload->ExpAttributeAdaptor->remove_all_by_expID($experiment->dbID);
		    $mimas_db->Upload->ExpFactorAdaptor->remove_all_by_expID($experiment->dbID);
		    
		    # unselect all user-defined experimental factors
		    if ($user_defined_factors) {
		        for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
		            delete $factor->{selected};
		        }
		    }

                    # process permissions
                    if ($params->{process_groups}) {
                        $mimas_db->Upload->GroupExpPrivilegeAdaptor->remove_all_by_expID($experiment->dbID);

                        my %read_groups  = map {($_, 1)} split (/\0/, $params->{read_groups }), split (/\0/, $params->{read_groups2 });
                        my %write_groups = map {($_, 1)} split (/\0/, $params->{write_groups}), split (/\0/, $params->{write_groups2});
                        my %groups_combi = (%read_groups, %write_groups);
                        for my $group_id (keys %groups_combi) {
                            my $can_write = $write_groups{$group_id} ? 1 : 0;
                            $mimas_db->Upload->GroupExpPrivilegeAdaptor->store(
                                -group_id       => $group_id,
                                -experiment_id  => $experiment->dbID,
                                -can_write      => $can_write,
                            );
                        }
                    }

                } else {


                    # process sample attributes

                    $adaptor     = 'SampleAttributeAdaptor';
                    $foreign_key = 'sample_id';
                    if   (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') {
                        push @for_attr_db_target_ids, keys %{$conditions->{$params->{condition_id}}->samples};
                    } else {
                        push @for_attr_db_target_ids, $params->{sample_id};
                    }
		    push @for_factor_db_target_ids, keys %{$conditions->{$params->{condition_id}}->samples};
                    
		    for my $sample_id (@for_attr_db_target_ids) {
                        $mimas_db->Upload->SampleAttributeAdaptor->remove_all_by_sampleID($sample_id);
		    }
		    
		    # delete all db experimental factor details for all samples in this condition
                    for my $factor (values %{$factors}) {
                        for my $sample_id (@for_factor_db_target_ids) {
                            $mimas_db->Upload->SampleAttributeAdaptor->remove_all_by_sample_and_attrID(-sample_id    => $sample_id,
				                                                                       -attribute_id => $factor->dbID);
                        }
		    }
		    
		    # delete or unselect all user-defined experimental factor details for this condition
		    # delete or unselect all user-defined experimental factor details for conditions that don't exist anymore
		    if ($user_defined_factors) {
		        for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
			    if (defined $factor->{values}) {
			        for my $condition_id (keys %{$factor->{values}}) {
				    delete $factor->{values}->{$condition_id} unless defined $conditions->{$condition_id};
				}
				delete $factor->{values}->{$params->{condition_id}};
				delete $factor->{values} unless %{$factor->{values}};
			    }
			    if (defined $factor->{units}) {
			        for my $unit (values %{$factor->{units}}) {
			            for my $condition_id (keys %{$unit->{selected}}) {
				        delete $unit->{selected}->{$condition_id} unless defined $conditions->{$condition_id};
				    }
				    delete $unit->{selected}->{$params->{condition_id}};
				    delete $unit->{selected} unless %{$unit->{selected}};
			        }
			    }
			}
		    }
                }




                
		for my $attribute (sort { $a->dbID <=> $b->dbID } values %{$attributes}) {
                    # decide which set of target IDs to use to process attribute data
                    my @db_target_ids;
                    if ($web_page eq 'exp_info') {
                        push @db_target_ids, $experiment->dbID;
                    } else {
                        push @db_target_ids, defined $factors->{$attribute->dbID} ? @for_factor_db_target_ids : @for_attr_db_target_ids;
                    }
		    my %db_target_ids = map { $_ => 1 } @db_target_ids;
                    
		    # user-defined handling
		    # flag if we have user-defined details and if so,
		    # unselect all user-defined details for this attribute and sample or all samples in condition
		    # unselect all user-defined details for this attribute for samples that don't exist anymore
		    my ($user_defined_values, $user_defined_units);
		    if (defined $working_data                                           and
		        defined $working_data->{upload}                                 and
		        defined $working_data->{upload}->{$experiment->dbID}            and
		        defined $working_data->{upload}->{$experiment->dbID}->{details} and
		        defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}) {
		        if (defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}) {
		            $user_defined_units++;
			    for my $unit (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
		                if ($web_page eq 'sample_attrs') {
				    for my $sample_id (keys %{$unit->{selected}}) {
				        delete $unit->{selected}->{$sample_id} unless defined $samples->{$sample_id};
				    }
				    for my $sample_id (@db_target_ids) {
				        delete $unit->{selected}->{$sample_id};
					delete $unit->{selected} unless %{$unit->{selected}};
				    }
				} else {
				    delete $unit->{selected};
				}
		            }
		        }
		        if (defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}) {
		            $user_defined_values++;
			    for my $value (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
		                if ($web_page eq 'sample_attrs') {
				    for my $sample_id (keys %{$value->{selected}}) {
				        delete $value->{selected}->{$sample_id} unless defined $samples->{$sample_id};
				    }
				    for my $sample_id (@db_target_ids) {
				        delete $value->{selected}->{$sample_id};
					delete $value->{selected} unless %{$value->{selected}};
				    }
				} else {
				    delete $value->{selected};
				}
		            }
		        }
		    }
		    
		    if ($attribute->is_numeric) {
		        # numeric values w/ user-defined units
		        if (defined $attribute->details and defined $params->{"other_attr_units_@{[$attribute->dbID]}"}) {
		            my $new_unit_name = $params->{"other_attr_units_@{[$attribute->dbID]}"};
			    my $existing_unit = $mimas_db->Library->AttrDetailAdaptor->select_by_attrs_ci(-name         => $new_unit_name,
				                                                                          -type         => 'unit',
			                                                                                  -attribute_id => $attribute->dbID);
                            unless (defined $existing_unit) {
			        # go through list of user-defined units and find if new unit is already there
			        # if so, make it selected, if not, create it and make it selected
			        my $unit_exists;
			        if ($user_defined_units) {
			            for my $unit (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
			                if (lc($unit->{name}) eq lc($new_unit_name)) {
				            if ($web_page eq 'sample_attrs') {
				                for my $sample_id (@db_target_ids) {
						    $unit->{selected}->{$sample_id} = 1;
						}
				            } else {
				                $unit->{selected} = 1;
				            }
				            $unit_exists++;
				        }
			            }
			        }
			        
			        unless ($unit_exists) {
			            my $new_unit_id;
				    if (defined $working_data->{upload}->{$experiment->dbID}->{sequence}) {
				        $new_unit_id = $working_data->{upload}->{$experiment->dbID}->{sequence}++;
				    } else {
				        $new_unit_id = ++$working_data->{upload}->{$experiment->dbID}->{sequence};
					$working_data->{upload}->{$experiment->dbID}->{sequence}++;
				    }
				    
				    my $selected;
				    if ($web_page eq 'sample_attrs') {
				        for my $sample_id (@db_target_ids) {
                                            $selected->{$sample_id} = 1;
                                        }
				    } else {
				        $selected = 1;
				    }
				    
				    my $new_unit = { 
                                                     ID       => $new_unit_id,
                                                     name     => $new_unit_name,
                                                     selected => $selected
                                                   };
                                    
				    $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{attribute_id}          = $attribute->dbID;
				    $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}->{$new_unit_id} = $new_unit;
			        }
			    } else {
			        $params->{"attr_units_@{[$attribute->dbID]}"} = $existing_unit->dbID;
			    }
		        }
		    } elsif ($attribute->upload_form_type =~ /^select/) {
		        if (defined $params->{"other_attr_values_@{[$attribute->dbID]}"}) {
		            # select menus w/ values built from library and a user-defined value
                            if (defined $attribute->details) {
                                my @new_value_names = split /\0/, $params->{"other_attr_values_@{[$attribute->dbID]}"};
                                for my $new_value_name (@new_value_names) {
                                    my $existing_value = $mimas_db->Library->AttrDetailAdaptor->select_by_attrs_ci(-name         => $new_value_name,
				                                                                                   -type         => 'value',
			                                                                                           -attribute_id => $attribute->dbID);
                                    unless (defined $existing_value) {
                                        # go through list of user-defined values and find if new value is already there
			                # if so, make it selected, if not, create it and make it selected
				        my $value_exists;
				        if ($user_defined_values) {
				            for my $value (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
				                if (lc($value->{name}) eq lc($new_value_name)) {
					            if ($web_page eq 'sample_attrs') {
				                        for my $sample_id (@db_target_ids) {
							    $value->{selected}->{$sample_id} = 1;
							}
				                    } else {
				                        $value->{selected} = 1;
							
							# select factor for matching factor value detail
							if ($user_defined_factors and $attribute->is_attribute and lc($attribute->name) eq 'experimental factors') {
							    for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
							        $factor->{selected} = 1 if $factor->{ID} == $value->{ID};
							    }
							}
				                    }
				                    $value_exists++;
					        }
				            }
				        }
				        
				        unless ($value_exists) {
				            my $new_value_id;
				            if (defined $working_data->{upload}->{$experiment->dbID}->{sequence}) {
				                $new_value_id = $working_data->{upload}->{$experiment->dbID}->{sequence}++;
				            } else {
				                $new_value_id = ++$working_data->{upload}->{$experiment->dbID}->{sequence};
					        $working_data->{upload}->{$experiment->dbID}->{sequence}++;
				            }
					    
					    my $selected;
					    if ($web_page eq 'sample_attrs') {
					        for my $sample_id (@db_target_ids) {
                                                    $selected->{$sample_id} = 1;
                                                }
					    } else {
					        $selected = 1;
					    }
					    
					    my $new_value = { 
							      ID       => $new_value_id,
							      name     => $new_value_name,
							      selected => $selected
							    };
					    
					    $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{attribute_id}            = $attribute->dbID;
					    $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}->{$new_value_id} = $new_value;
					    
					    # special working data additions for "Experimental Factors"
					    if ($attribute->is_attribute and lc($attribute->name) eq 'experimental factors') {
					        # give same ID to factor as value detail above so that they can be matched up easily (don't think there will be any conficts)
						my $new_factor = defined MIMAS_UNITS->{$other_factors->{$new_value_name}->{unit_group_id}}
						                   ? { 
								       ID         => $new_value_id,
								       name       => $new_value_name,
                                                                       is_numeric => $other_factors->{$new_value_name}->{is_numeric},
                                                                       units      => MIMAS_UNITS->{$other_factors->{$new_value_name}->{unit_group_id}}->{units},
								       selected   => 1
								     }
                                                                   : { 
								       ID         => $new_value_id,
								       name       => $new_value_name,
                                                                       is_numeric => $other_factors->{$new_value_name}->{is_numeric},
                                                                       selected   => 1
								     };
                                                
                                                $working_data->{upload}->{$experiment->dbID}->{factors}->{$new_value_id} = $new_factor;
					    }
				        }
                                    } else {
                                        $params->{"attr_values_@{[$attribute->dbID]}"} .= $params->{"attr_values_@{[$attribute->dbID]}"} eq ''
				                                                            ? $existing_value->dbID
											    : "\0" . $existing_value->dbID;
                                    }
                                }
                            }
                            # select menus w/ values not built from library (character strings) and a user-defined value
                            else {
                                $params->{"attr_values_@{[$attribute->dbID]}"} .= $params->{"attr_values_@{[$attribute->dbID]}"} eq ''
			                                                            ? $params->{"other_attr_values_@{[$attribute->dbID]}"}
										    : "\0" . $params->{"other_attr_values_@{[$attribute->dbID]}"};
                            }
		        }
		    }
		    
		    # database inserts
		    if (defined $params->{"attr_values_@{[$attribute->dbID]}"} and 
		        $params->{"attr_values_@{[$attribute->dbID]}"} ne ''   and
			$params->{"attr_values_@{[$attribute->dbID]}"} ne MIMAS_NONE_NA_OPTION) {
                        # text and textarea elements
                        if ($attribute->upload_form_type =~ /^text/) {
                            # numeric fields
                            my ($numeric_value, $char_value) = (undef, undef);
			    if ($attribute->is_numeric) {
			        $numeric_value  = $params->{"attr_values_@{[$attribute->dbID]}"};
			    }
			    # non-numeric fre text fields
			    else {
			        $char_value = $params->{"attr_values_@{[$attribute->dbID]}"};
			    }
			    my $attr_detail_id = defined $attribute->details 
			                           ? $params->{"attr_units_@{[$attribute->dbID]}"}
			                           : undef;
			    for my $db_target_id (@db_target_ids) {
                                $mimas_db->Upload->$adaptor->store(-char_value     => $char_value,
			                                           -numeric_value  => $numeric_value,
			                                           -attr_detail_id => $attr_detail_id,
			                                           -attribute_id   => $attribute->dbID,
			                                          "-$foreign_key"  => $db_target_id);
                                }
                        }
                        # select, select-multiple, and radio elements
                        elsif ($attribute->upload_form_type =~ /^(select|radio)/) {
                            # select menus w/ values built from library
                            if (defined $attribute->details) {
                                my @attr_detail_ids = split /\0/, $params->{"attr_values_@{[$attribute->dbID]}"};
                                for my $db_target_id (@db_target_ids) {
                                    for my $attr_detail_id (@attr_detail_ids) {
                                        $mimas_db->Upload->$adaptor->store(-char_value     => undef,
				                                           -numeric_value  => undef,
				                                           -attr_detail_id => $attr_detail_id,
				                                           -attribute_id   => $attribute->dbID,
				                                          "-$foreign_key"  => $db_target_id);
                                    }
                                }
				# special case for "Experimental Factors" to store factors for experiment
				if ($attribute->is_attribute and lc($attribute->name) eq 'experimental factors') {
				    for my $attr_detail_id (@attr_detail_ids) {
				        $mimas_db->Upload->ExpFactorAdaptor->store(-experiment_id => $experiment->dbID,
					                                           -factor_id     => $attribute->details->{$attr_detail_id}->link_id);
				    }
				}
                            }
                            # select menus w/ values not built from library (character strings)
                            else {
                                my @char_values = split /\0/, $params->{"attr_values_@{[$attribute->dbID]}"};
				for my $db_target_id (@db_target_ids) {
                                    for my $char_value (@char_values) {
					$mimas_db->Upload->$adaptor->store(-char_value     => $char_value,
				                                           -numeric_value  => undef,
				                                           -attr_detail_id => undef,
				                                           -attribute_id   => $attribute->dbID,
				                                          "-$foreign_key"  => $db_target_id);
                                    }
                                }
                            }
                        }
                    }
                }
                
		# user-defined experimental factor details inserts
		if ($web_page eq 'sample_attrs' and $user_defined_factors) {
		    for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
		        if ($factor->{selected}) {
			    if (defined $params->{"other_factor_values_$factor->{ID}"} and $params->{"other_factor_values_$factor->{ID}"} ne '') {
			        $factor->{values}->{$params->{condition_id}} = $params->{"other_factor_values_$factor->{ID}"};
				if ($factor->{is_numeric} and defined $factor->{units}) {
				    $factor->{units}->{$params->{"other_factor_units_$factor->{ID}"}}->{selected}->{$params->{condition_id}} = 1;
				}
			    }
			}
		    }
		}
		
		
                if ($web_page eq 'exp_info') {
                    # since we possibly have changed something on the experiment information page which could affect the sample attributes and
		    # experimental factor details, reset attribute completion flags
		    $mimas_db->Upload->SampleAdaptor->update(-set        => [ -attrs_complete => 0                 ],
			                                     -qualifiers => [ -experiment_id  => $experiment->dbID ]);
		    
		    # update progress bar to "sample attributes" regardless of whether we have been further
                    $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress      => $progress + 1     ],
			                                         -qualifiers => [ -experiment_id => $experiment->dbID ]);
                    
                    # after processing "exp_info" POST without errors redirect to "sample_attrs"
                    $redirect = "$base/upload?page=sample_attrs&session_id=${session_id}";
                } else {
                    # after processing "sample_attrs" POST without errors figure out where to redirect
                    # 1) if all samples are processed and completed and we have never been to "upload_summary" then go to "upload_summary" 
                    #    otherwise advance to next sample using this methodology:
                    # 2) if we are at the last sample in a condition then go to the first sample of the next condition
                    # 3) if we processed every sample in a condition at once then go to the first sample of the next condition
                    # 4) if we are at the last sample in the last condition then go to the first sample of the first condition
                    #
                    # we need the scan the sample table to see if we have completed all of the other sample attributes in the experiment
                    # (the ones not involved in this particular submission) so that we can move ahead to "upload_summary" 
		    # but only if we have never been there before
                    
                    my $all_sample_attrs_complete = 1;
		    for my $sample (values %{$samples}) {
                        unless ($sample->attrs_complete) {
			    if (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') {
			        if ($sample->condition->dbID != $params->{condition_id}) {
				    $all_sample_attrs_complete = 0;
				    last;
				}
			    } elsif ($sample->dbID != $params->{sample_id}) {
			        $all_sample_attrs_complete = 0;
				last;
			    }
                        }
                if (!$sample->files) {
				    $all_sample_attrs_complete = 0;
				    last;
				}
                if (!$sample->array) {
				    $all_sample_attrs_complete = 0;
				    last;
				}
		    }
		    
		    if (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') {
		        # set all sample attributes in condition as existing and completed
			$mimas_db->Upload->SampleAdaptor->update(-set        => [ -attrs_exist    => 1,
			                                                          -attrs_complete => 1                       ],
			                                         -qualifiers => [ -condition_id   => $params->{condition_id},
								                  -experiment_id  => $experiment->dbID       ]);
		    } else {
		        # set sample attributes as existing and completed
			$mimas_db->Upload->SampleAdaptor->update(-set        => [ -attrs_exist    => 1,
			                                                          -attrs_complete => 1                    ],
			                                         -qualifiers => [ -sample_id      => $params->{sample_id},
								                  -experiment_id  => $experiment->dbID    ]);
		    }
		    
		    if ($experiment->progress <= $progress and $all_sample_attrs_complete) {
                        # update progress bar to that of "upload_summary"
                        $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -progress      => $progress + 1     ],
			                                             -qualifiers => [ -experiment_id => $experiment->dbID ]);
                        
                        $redirect = "$base/upload?page=upload_summary&session_id=${session_id}";
                    } else {
                        my @sorted_condition_ids = sort {    $conditions->{$a}->display_order                             <=>    $conditions->{$b}->display_order                             } keys %{$conditions};
                        my @sorted_sample_ids    = sort { lc($conditions->{$params->{condition_id}}->samples->{$a}->name) cmp lc($conditions->{$params->{condition_id}}->samples->{$b}->name) } keys %{$conditions->{$params->{condition_id}}->samples};
                        
			my $entire_condition;
                        if (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') {
			    $entire_condition = 'yes';
			    # short-circuit process below if we processed every sample in an experimental condition at once
			    $params->{sample_id} = $sorted_sample_ids[$#sorted_sample_ids];
                        } else {
			    $entire_condition = 'no';
                        }
                        
                        my ($next_condition_id, $next_sample_id);
                        for my $i (0 .. $#sorted_sample_ids) {
		            if ($sorted_sample_ids[$i] == $params->{sample_id}) {
			        if ($i == $#sorted_sample_ids) {
			            for my $j (0 .. $#sorted_condition_ids) {
				        if ($sorted_condition_ids[$j] == $params->{condition_id}) {
				            $next_condition_id = ($j == $#sorted_condition_ids) ? $sorted_condition_ids[0] : $sorted_condition_ids[$j + 1];
					    @sorted_sample_ids = sort { lc($conditions->{$next_condition_id}->samples->{$a}->name) cmp lc($conditions->{$next_condition_id}->samples->{$b}->name) } keys %{$conditions->{$next_condition_id}->samples};
					    $next_sample_id    = $sorted_sample_ids[0];
		                            last;
				        }
				    }
			        } else {
			            $next_condition_id = $params->{condition_id};
			            $next_sample_id    = $sorted_sample_ids[$i + 1];
			        }
		                last;
		            }
                        }
			
			$redirect = "$base/upload?page=${web_page}&session_id=${session_id}&entire_condition=${entire_condition}&condition_id=${next_condition_id}&sample_id=${next_sample_id}";
                    }
	        }
	        
		# update user working data if it exists
		$mimas_db->User->UserAdaptor->update(-set        => [ -working_data => $working_data ],
		                                     -qualifiers => [ -user_id      => $edited_user->dbID   ]) if defined $working_data;
		
	        # commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
	        # after processing "exp_info" or "sample_attrs" POST without errors redirect to appropriate place
	        print $mimas_web->cgi->redirect($redirect);
	        exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn(uc $web_page . " ATTRIBUTE PROCESSING transaction aborted:\n$@");
	    }
        }
    }
    #
    ## EXPERIMENT PERMISSIONS
    #
    elsif ($web_page eq 'exp_permissions') {
	
	    my $redirect;
            eval {

                    # process permissions
                    if ($params->{process_groups}) {
                        $mimas_db->Upload->GroupExpPrivilegeAdaptor->remove_all_by_expID($experiment->dbID);

                        my %read_groups  = map {($_, 1)} split (/\0/, $params->{read_groups }), split (/\0/, $params->{read_groups2 });
                        my %write_groups = map {($_, 1)} split (/\0/, $params->{write_groups}), split (/\0/, $params->{write_groups2});
                        my %groups_combi = (%read_groups, %write_groups);
                        for my $group_id (keys %groups_combi) {
                            my $can_write = $write_groups{$group_id} ? 1 : 0;
                            $mimas_db->Upload->GroupExpPrivilegeAdaptor->store(
                                -group_id       => $group_id,
                                -experiment_id  => $experiment->dbID,
                                -can_write      => $can_write,
                            );
                        }
                    }

                $redirect = "$base/upload?page=sample_attrs&session_id=${session_id}";
	        
	        # commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
	        # after processing "exp_permissions" POST without errors redirect to appropriate place
	        print $mimas_web->cgi->redirect($redirect);
	        exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn(uc $web_page . " PERMISSIONS PROCESSING transaction aborted:\n$@");
	    }
    }
    #
    ## UPLOAD REJECTED: put experiment back into WORKING status
    #
    elsif ($web_page eq 'upload_completed' and defined $params->{reject_curation}) {
        unless ($curation_mode) {
            push @errors, 'Upload authentication failed!';
        }
        
	# process if no errors
	unless (@errors) {
	    eval {
                $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -state         => MIMAS_UPLOAD_WORKING ],
                                                             -qualifiers => [ -experiment_id => $experiment->dbID    ]);
		# commit to DB
		$mimas_db->commit();
	    };
	    
	    unless ($@) {
                print $mimas_web->cgi->redirect("$base/admin?page=curation&session_id=${session_id}");
		exit;
	    } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("REPOSITORY SUBMISSION transaction aborted:\n$@");
	    }
	}
    }
    elsif ($web_page eq 'upload_completed' and defined $params->{approve_upload}) {
        
        unless ($curation_mode) {
            push @errors, 'Upload authentication failed!';
        }

	# process repository submission if no errors
	unless (@errors) {
	    eval {
                my $working_data   = $edited_user->working_data;
                if (defined $working_data                                and
                    defined $working_data->{upload}                      and
                    defined $working_data->{upload}->{$experiment->dbID} and
                    defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
                    for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
                        if (my $form_type_id = $params->{"form_type_@{[$factor->{ID}]}"}) {
                            if (${+MIMAS_FORM_TYPES}{$form_type_id}) {
                                $factor->{'form_type_id'} = $form_type_id;
                            }
                            else {
                                push @errors, "Invalid input (form_type_id=$form_type_id)";
                            }
                        }
                    }
                }
                $curation_log = approveCuration($mimas_db, $experiment, $edited_user, $auth_user);
		
		# commit to DB
		$mimas_db->commit();
	    };

            # do not redirect to another page, but display $curation_log
	    if ($@) {
	        push @errors, MIMAS_DB_ERROR_MSG;
	        push @errors, $@;
		$mimas_db->warn("REPOSITORY SUBMISSION transaction aborted:\n$@");
	    }
	}
    }
    elsif ($web_page eq 'upload_completed' and defined $params->{submit_curation}) {
        
	# process repository submission if no errors
	unless (@errors) {
	    eval {
                my $needs_curation = needs_curation($edited_user, $experiment);

                if ($needs_curation) {

                    $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -state         => MIMAS_UPLOAD_IN_CURATION ],
                        -qualifiers => [ -experiment_id => $experiment->dbID        ]);

                    # send e-mail to MIMAS admin
                    send_email(
                        'From'     => MIMAS_ADMIN_EMAIL_ADDRESS,
                        'To'       => MIMAS_ADMIN_EMAIL_ADDRESS,
                        'Subject'  => '[MIMAS] Curation request',
                        'Data'     => "User '@{[$auth_user->full_name_reversed]}' has submitted an experiment to MIMAS curation.\n\n"
                        . "Experiment owner: @{[$experiment->owner->full_name_reversed]} (@{[$experiment->owner->username]})\n"
                        . "Experiment name: @{[substr($experiment->name, 0, 50)]}...\n"
                        ,
                    ) or die "Could not send notification email: $!";
                }
                else {
                    $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -state         => MIMAS_UPLOAD_IN_REPOSITORY ],
                        -qualifiers => [ -experiment_id => $experiment->dbID        ]);
                }

		# commit to DB
		$mimas_db->commit();
	    };
	    
            unless ($@) {

                # after processing POST redirect to "manage_uploads"
                print $mimas_web->cgi->redirect("$base/upload?page=manage_uploads&session_id=${session_id}");
                exit;
            } else {
	        push @errors, MIMAS_DB_ERROR_MSG;
		$mimas_db->warn("REPOSITORY SUBMISSION transaction aborted:\n$@");
	    }
	}
    }
    #
    ## bad POST action
    #
    else {
        push @errors, 'Invalid action!';
    }
}
#
## GET processing & error checking
#
elsif ($mimas_web->cgi->request_method eq 'GET') {
    #
    ## MANAGE UPLOADS: go to experiment upload (after user clicked on the EDIT button)
    #
    if ($web_page eq 'manage_uploads' and defined $params->{experiment_id}) {
        #
        ## Upload Authentication and Session Processing
        #
        if (
            $mimas_db->Upload->AuthAdaptor->auth_writer_state(
                -state         => MIMAS_UPLOAD_WORKING,
                -user_id       => $auth_user->dbID,
                -experiment_id => $params->{experiment_id},
            )
                or
            $mimas_db->Upload->AuthAdaptor->auth_writer_state(
                -state         => MIMAS_UPLOAD_IN_REPOSITORY,
                -user_id       => $auth_user->dbID,
                -experiment_id => $params->{experiment_id},
            )
                or $auth_user->is_curator
        ) {

            #If experiment was in REPOSITORY state, put it back in WORKING state
            $mimas_db->Upload->ExperimentAdaptor->update(-set        => [ -state         => MIMAS_UPLOAD_WORKING ],
                -qualifiers => [
                -experiment_id => $params->{experiment_id},
                -state => MIMAS_UPLOAD_IN_REPOSITORY,
                ]);
            
	    $mimas_web->session->{upload}    = { experiment_id => $params->{experiment_id} };
	    $mimas_web->session->{timestamp} = time;
	    
	    # after updating session redirect to "file_upload"
	    print $mimas_web->cgi->redirect("$base/upload?page=file_upload&session_id=${session_id}");
	    
	    # store session
	    $mimas_db->Web->SessionAdaptor->store($mimas_web->session);
	    
	    exit;
        } else {
            push @errors, 'Upload authentication failed!';
        }
    }
    elsif ($web_page eq 'export_data' and defined $params->{experiment_id}) {

        # process repository submission if no errors
        unless (@errors) {

            my $download = join "&", map {"download_exp_ids=$_"} split /\0/, $params->{experiment_id};

            # after processing POST redirect to "manage_uploads"
            print $mimas_web->cgi->redirect("$base/search?page=search_results&session_id=${session_id}&$download");
            exit;
        } else {
            push @errors, MIMAS_DB_ERROR_MSG;
            $mimas_db->warn("REPOSITORY SUBMISSION transaction aborted:\n$@");
        }
    }
    
}
#
## bad page request
#
else {
    push @errors, 'Invalid page request!';
}

if (@errors) {
    eval { $mimas_db->rollback() };
    $mimas_web->error(@errors);
}


#
## HTML GENERATION: do the page specific data object preparation, processing, and HTML page setup
#
my ($cache_control, $body, $jscript, $title, $onunload);
my $detail_menu = 'UPLOADS';

if ($web_page eq 'manage_uploads') {
    my $experiments = $edited_user->experiments;
    
    # create JavaScript objects (see below to where we populate objects)
    my $exp_obj = '{}';
    
    # prepare HTML
    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="edited_user" value="@{[$edited_user->dbID]}">
    <input type="hidden" name="page" value="$web_page">
    HTML
    
    my $manage_html = '';
    if (defined $experiments) {
        my $exp_rows_html;
        my $counter = 1;
        my $num_experiments = scalar keys %{$experiments};
        for my $experiment (sort { lc($a->name) cmp lc($b->name) } values %{$experiments}) {
            my $escaped_name = $mimas_web->cgi->escapeHTML($experiment->name);
	    my $href         = "$base/upload?page=manage_uploads&session_id=${session_id}&experiment_id=@{[$experiment->dbID]}";

	    my $href_export  = "$base/upload?page=export_data&session_id=${session_id}&experiment_id=@{[$experiment->dbID]}";
	    
            my ($title_html, $name_html, $status_html, $edit_html, $remove_html, $export_html) = ('') x 6;
	    if ($experiment->state == MIMAS_UPLOAD_WORKING) {
	        $title_html  = 'Click to rename this experiment';
	        $name_html   = qq!<span onMouseOver="this.className='expname01over'" onMouseOut="this.className=null" onClick="renameexp(this, expobj, @{[$experiment->dbID]})">$escaped_name</span>!;
	        $status_html = qq!<span class="working">WORKING</span>!;
	        $edit_html   = qq!<input class="button01w60" type="button" title="Click to view/edit this experiment" onClick="location.href='$href'" value="EDIT">!;
	        $remove_html = qq!<input type="checkbox" id="remove_@{[$experiment->dbID]}" name="remove_exps" value="@{[$experiment->dbID]}">!;
	        $export_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	    } 
	    elsif ($experiment->state == MIMAS_UPLOAD_IN_CURATION) {
	        $name_html   = $escaped_name;
	        $status_html = qq!<span class="curation">IN CURATION</span>!;
	        $edit_html   = qq!&nbsp;!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	    }
	    elsif ($experiment->state == MIMAS_UPLOAD_QUEUED) {
	        $name_html   = qq!<span onMouseOver="this.className='expname01over'" onMouseOut="this.className=null" onClick="renameexp(this, expobj, @{[$experiment->dbID]})">$escaped_name</span>!;
	        $status_html = qq!<span class="queued">QUEUED</span>!;
	        $edit_html   = qq!&nbsp;!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<input class="button01w60" type="button" title="Click to export this experiment" onClick="location.href='$href_export'" value="EXPORT">!;
	    }
	    elsif ($experiment->state == MIMAS_UPLOAD_UPDATE) {
	        $name_html   = $escaped_name;
	        $status_html = qq!<span class="queued">QUEUED FOR UPDATE</span>!;
	        $edit_html   = qq!&nbsp;!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	    }
	    elsif ($experiment->state == MIMAS_UPLOAD_IN_REPOSITORY) {
	        $name_html   = qq!<span onMouseOver="this.className='expname01over'" onMouseOut="this.className=null" onClick="renameexp(this, expobj, @{[$experiment->dbID]})">$escaped_name</span>!;
	        $status_html = qq!<span class="repository">IN REPOSITORY</span>!;
	        $edit_html   = qq!<input class="button01w60" type="button" title="Click to view/edit this experiment" onClick="location.href='$href'" value="MODIFY">!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<input class="button01w60" type="button" title="Click to export this experiment" onClick="location.href='$href_export'" value="EXPORT">!;
	    }
	    elsif ($experiment->state == MIMAS_UPLOAD_LOADING) {
	        $name_html   = $escaped_name;
	        $status_html = qq!<span class="queued">LOADING...</span>!;
	        $edit_html   = qq!&nbsp;!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	    }
	    else {
	        $name_html   = $escaped_name;
	        $status_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $edit_html   = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $remove_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	        $export_html = qq!<img width="1" height="1" alt="" src="/images/spacer.gif">!;
	    }

        $name_html = qq!<input class="button01w60 buttoncurate" type="button" title="Click to view/edit this experiment" onClick="location.href='$href'" value="MODIFY"> ! . $name_html if $curation_mode;

        my $is_public = grep {$_->name eq 'MIMAS Registered Users'} values %{$experiment->read_groups || {}};
        my $public_html = $is_public ? "<img src='/images/icon_public.gif' width='18' height='18' title='Experiment data is public'>" : "&nbsp;";
	    
        my $is_germonline = $experiment->is_germonline;
        my $germonline_html = $is_germonline ? "<img src='/images/icon_germonline.gif' width='18' height='18' title='Experiment data is displayed in GermOnline'>" : "&nbsp;";
	    
	    my $td_class01 = $counter != $num_experiments ? 'cell01' : 'cell03';
	    my $td_class02 = $counter != $num_experiments ? 'cell02' : 'cell04';
	    
	    $exp_rows_html .= <<"            HTML";
	    <tr>
	      <td class="${td_class01}wrap" title="$title_html">$name_html</td>
	      <td class="${td_class02}ctr">$status_html</td>
	      <td class="${td_class02}ctr">$germonline_html</td>
	      <td class="${td_class01}ctr">$public_html</td>
	      <td class="${td_class01}ctr">$edit_html</td>
	      <td class="${td_class01}ctr">$export_html</td>
	      <td class="${td_class02}ctr">$remove_html</td>
	    </tr>
            HTML
            
	    $counter++;
        }
        
        $manage_html = <<"        HTML";
        <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
        <tr>
          <td>
            <form id="manage_uploads" name="manage_uploads" method="post" action="$base/upload" onSubmit="return checkmanageexps(this, expobj)" onReset="location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}')">
              <table class="submain01" cellpadding="0" cellspacing="0" border="0">
                <tr><td class="tableheader01">Manage Experiments</td></tr>
	        <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	        <tr>
	          <td>
	            <table width="100%" cellpadding="0" cellspacing="0" border="0">
	              <tr>
	                <td class="colheader01w70pct">Name</td>
		        <td class="colheader02ctr">Status</td>
		        <td class="colheader02ctr"></td>
		        <td class="colheader01ctr"></td>
                    <td class="colheader01ctr">Edit</td>
		        <td class="colheader01ctr">Export</td>
		        <td class="colheader02ctr">Remove</td>
	              </tr>
	              $exp_rows_html
	            </table>
	          </td>
	        </tr>
	        <tr><td class="submit"><input class="submitw115" type="submit" value="PROCESS SELECTED"></td></tr>
	        <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
              </table>
              $hidden_html
            </form>
          </td>
        </tr>
        HTML
        
        # populate JavaScript objects
        $exp_obj = '{';
        for my $experiment (values %{$experiments}) {
            my $name  = escapeJS($experiment->name);
	    $exp_obj .= " @{[$experiment->dbID]}: \"$name\",";
        }
        chop $exp_obj; #{
        $exp_obj .= ' }';
    }
    
    $body = <<"    HTML";
    <tr><td class="header01">Create &amp; Manage MIMAS Uploads</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <form name="create_upload" method="post" action="$base/upload" onSubmit="return checkcreateupload(this, expobj)">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
            <tr><td class="tableheader01">Create an Experiment</td></tr>
	    <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	    <tr>
	      <td>
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
	          <tr>
	            <td class="cell03w125">Experiment Name:</td>
		    <td class="cell04"><input class="w100pct" type="text" name="experiment_name"></td>
	          </tr>
	        </table>
	      </td>
	    </tr>
	    <tr><td class="submit"><input class="submitw115" type="submit" value="CREATE"></td></tr>
          </table>
          $hidden_html
        </form>
      </td>
    </tr>
    $manage_html
    HTML

    $jscript = <<"    JSCRIPT";
    var expobj = $exp_obj;
    JSCRIPT
    
    $title         = 'Manage Sample/Experiment Uploads';
    $cache_control = 'no-store';
    $onunload      = '';
    
}
elsif ($web_page eq 'file_upload') {
    my $samples = $experiment->samples;
    my $files   = $experiment->files;
    
    # user shouldn't get here without appropriate progress number
    push @errors, 'Previous pages are not properly completed!  Please go back.' unless $experiment->progress >= $progress;
    $mimas_web->error(@errors) if @errors;
    
    # data structure processing
    my $file_exts;
    $file_exts->{$_->sample->dbID}->{$_->format} = $_ for map {values %{$_->sample_to_files}} values %{$files};
    
    # create JavaScript objects (see below to where we populate object)
    my $file_obj = '{}';
    
    # prepare HTML
    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="$web_page">
    <input type="hidden" name="publish_germonline_input">
    <input type="hidden" name="add_sample">
    <input type="hidden" name="action_type">
    HTML
    
    my $file_rows_html = '';
    my $germonline_submit_html = '';
    my $remove_ctl_html = '';
    if (defined $samples and defined $files) {


#count
		my @seen_file_exts_nor_2;
		NOR2: for my $ext (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NOR_2}) {
			for my $sampleid (keys %$file_exts) {
				next unless defined $file_exts->{$sampleid}->{$ext};
				push @seen_file_exts_nor_2, $ext;
				next NOR2;
			}
		}
		my @all_ext = (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NON_NOR}, @{+MIMAS_UPLOAD_VALID_FILE_EXTS_NOR_1}, @seen_file_exts_nor_2);

        $file_rows_html = "<tr><td class='colheader01w50pct' style='text-align:right'>Files</td>";
		$file_rows_html .= "<td class='colheader01ctrw10pct' colspan='" . @{+MIMAS_UPLOAD_VALID_FILE_EXTS_NON_NOR} . "'>Non-normalized</td>";
		$file_rows_html .= "<td class='colheader01ctrw10pct' colspan='" . (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NOR_1} + @seen_file_exts_nor_2) . "'>Normalized</td>";
		$file_rows_html .= "<td class='colheader02ctrw10pct'>&nbsp;</td></tr>";
        
        $file_rows_html .= "<tr><td class='colheader01w50pct'>Sample Name</td>";

		for my $ext (@all_ext) {
			$file_rows_html .= "<td class='colheader01ctrw10pct'>$ext</td>";
		}
		$file_rows_html .= "<td class='colheader02ctrw10pct'>Remove</td></tr>";

		my $counter = 1;
        my $num_samples = scalar keys %{$samples};
        for my $sample (sort { lc($a->name) cmp lc($b->name) } values %{$samples}) {
            my $td_class01 = $counter != $num_samples ? 'cell01' : 'cell03';
	    my $td_class02 = $counter != $num_samples ? 'cell02' : 'cell04';
	    my $name_html  = $mimas_web->cgi->escapeHTML($sample->name);
        my %seen_names = ($sample->name => 1);
	    for my $stf (values %{$sample->sample_to_files || {}}) {
            next if $seen_names{$stf->hybridization_name}++;
            $name_html .= "<span class='darkcolor01'>" . $mimas_web->cgi->escapeHTML(" (" . $stf->hybridization_name.")") . "</span>" ;
        }
	    
	    $file_rows_html .= "<tr><td class='${td_class01}'>$name_html";
	    #line 2: merge
        if ($merge_mode) {

            my @mergeable = mergeable_samples({$sample->dbID => $sample}, $samples, $file_exts);
            my $merge_html = '';
            for my $sample2 (@mergeable) {
                my $sample2_name_html = $mimas_web->cgi->escapeHTML($sample2->name);
                $merge_html  .= "<option value='@{[$sample2->dbID]}'>$sample2_name_html</option>";
            }

            if ($merge_html) {
                $file_rows_html .= "<br/>merge with:
                    <select name='merge_@{[$sample->dbID]}' onchange='checkmerge(this, this.form)'><option></option> $merge_html</select>";
            }
        }
	    $file_rows_html .= "</td>";

		my $found_non_nor;
		for my $ext (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NON_NOR}) {
			if (defined $file_exts and defined $file_exts->{$sample->dbID} and defined $file_exts->{$sample->dbID}->{$ext}) {
				$found_non_nor = 1;
			}
		}
		if ($found_non_nor) {
			for my $ext (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NON_NOR}) {
                my $bullet;
                if (defined $file_exts and defined $file_exts->{$sample->dbID} and defined $file_exts->{$sample->dbID}->{$ext}) {
                    $bullet = "&bull;";
                }
                else {
                    $bullet = "<img width='1' height='1' alt='' src='/images/spacer.gif'>";
                }

				$file_rows_html .= "<td class='${td_class01}ctr'>$bullet</td>";
			}
		}
		else {
				$file_rows_html .= "<td class='${td_class01}ctr warning' colspan='" . @{+MIMAS_UPLOAD_VALID_FILE_EXTS_NON_NOR} . "'>missing</td>";
		}

	    for my $ext (@{+MIMAS_UPLOAD_VALID_FILE_EXTS_NOR_1}, @seen_file_exts_nor_2) {
                my $bullet;
                if (defined $file_exts and defined $file_exts->{$sample->dbID} and defined $file_exts->{$sample->dbID}->{$ext}) {
                    my $sample_to_file = $file_exts->{$sample->dbID}->{$ext};
                    my $checked = $sample_to_file->is_germonline ? "checked='checked'" : "";
                    $bullet = $is_germonline_manager ? 
                        "<input type='checkbox' name='publish_germonline' value='@{[$sample_to_file->dbID]}' $checked>&bull;"
                        : "&bull;";
                }
                else {
                    $bullet = "<img width='1' height='1' alt='' src='/images/spacer.gif'>";
                }

	        $file_rows_html .= "<td class='${td_class01}ctr'>$bullet</td>";
	    }
	    $file_rows_html .= "<td class='${td_class02}ctr'><input type='checkbox' name='remove_samples' value='@{[$sample->dbID]}'></td></tr>";

	    
	    $counter++;
        }

        if ($is_germonline_manager) {
            $germonline_submit_html = "
	        <tr><td class='tablespacer01 submit'>
                [Germonline manager mode] select normalized files above to be displayed in Germonline
                <input class='submitw115' type='submit' value='PROCESS SELECTED' onclick='this.form.elements[\"publish_germonline_input\"].value = 1'>
                </td></tr>
                ";
        }

        $remove_ctl_html = $merge_mode ? "" : <<"        HTML";
	        <tr><td class="submit"><input class="submitw115" type="submit" value="REMOVE SELECTED"></td></tr>
	        <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
        HTML

        
        # populate JavaScript object
        $file_obj = '{';
        for my $sample (values %{$samples}) {
	if ($file_exts and $file_exts->{$sample->dbID}) {
            my $name = escapeJS($sample->name);
	    $file_obj .= " \"$name\": {";
	    $file_obj .= " \"$_\": 1," for keys %{$file_exts->{$sample->dbID}}; #{
            $file_obj .= ' },';
	}
        }
        $file_obj .= ' }';
    }

    my $sample_ctl_html;
    if ($merge_mode) {
        $sample_ctl_html = <<"        HTML";
            <input class="submitw115" type="button" value="MERGE SAMPLES" onClick="this.form.elements['action_type'].value = 'merge_samples'; this.form.submit()">
            <img width="10" height="1" alt="" src="/images/spacer.gif">
            <input class="submitw115" type="button" value="Cancel" onClick="this.form.elements['action_type'].value = 'cancel_merge'; this.form.submit()">
        HTML
    }
    else {
        $sample_ctl_html = <<"        HTML";
            <input class="submitw115" type="button" value="ADD..." onClick="addsample(this.form)">
            <img width="10" height="1" alt="" src="/images/spacer.gif">
        HTML

            #should the option to merge samples be displayed?
            my @mergeable = mergeable_samples($samples, $samples, $file_exts);
            if (@mergeable) {
                $sample_ctl_html .= qq(<input class="submitw115" type="button" value="MERGE..." onClick="this.form.elements['action_type'].value = 'show_merge'; this.form.submit()">);
            }
    }
        
    my $sample_list_html = <<"        HTML";
        <tr>
          <td>
            <form name="remove_files" method="post" action="$base/upload" onSubmit="return checkremovefiles(this)">
              <table class="submain01" cellpadding="0" cellspacing="0" border="0">
                <tr><td class="tableheader01">Uploaded Sample Files</td></tr>
	        <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
                <tr>
	          <td>
	            <table width="100%" cellpadding="0" cellspacing="0" border="0">
	              $file_rows_html
	            </table>
	          </td>
	        </tr>
	        <tr><td class="submitopts01">
            $sample_ctl_html
		</td></tr>
                $germonline_submit_html
		$remove_ctl_html
              </table>
              $hidden_html
            </form>
          </td>
        </tr>
        <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
        HTML


    my $germonline_array_html = "";
    my $overwrite_html = "";
    if ($is_germonline_manager) {
        my $array_html = "<option></option>";
        my $all_technologies = $mimas_db->Library->TechnologyAdaptor->select_all();
        for my $tech (sort {$a->dbID <=> $b->dbID} values %$all_technologies) {
            $array_html  .= "<optgroup label='@{[$tech->display_name]}'>";
            my $arrays = $mimas_db->Library->ArrayAdaptor->select_all_by_technologyID($tech->dbID);
            for my $array (sort { lc($a->design_name) cmp lc($b->design_name) } values %{$arrays}) {
                my $html = $mimas_web->cgi->escapeHTML($array->display_name);
                $array_html  .= "<option value='@{[$array->dbID]}'>$html</option>";
            }
            $array_html  .= "<optgroup>";
        }
        $germonline_array_html = "<tr><td class='tablespacer01'>[Germonline manager mode] If you are uploading normalized files with no CEL files attached, specify the reference array here &rarr; <select name='selected_array_id'>$array_html</select><br><label for='force_probesets'><input type='checkbox' name='force_probesets'>Force even in number of probesets does not match array specification (use with care!)</label></td></tr>\n";
        $overwrite_html = "<tr><td class='tablespacer01'><label for='overwrite_files'><input type='checkbox' name='overwrite_files'>Overwrite existing files with identical name</label></td></tr>\n";
    }

    # NB: Browsers other than IE ignore the CSS width attribute for
    #     file upload elements. Fall back on size attribute in that case.
    my $ind_file_upload_html  = '<input size="100" class="w100pct" type="file" name="uploaded_files">' ;
    
    $body = <<"    HTML";
    <tr id="file_upload_area">
      <td>
        <table class="maindisplay" align="center" cellpadding="0" cellspacing="0" border="0">
          <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
          <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
          $sample_list_html
          <tr>
            <td>
              <form name="ind_file_upload" enctype="multipart/form-data" method="post" action="$base/upload" onSubmit="return checkindfileupload(this, fileobj, progressurl, maxfiles)" onReset="if (confirm('Reset entire page and start over?')) location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}'); else return false">
                <table class="submain01" cellpadding="0" cellspacing="0" border="0">
                  <tr><td class="tableheader01">Add Files or Archives</td></tr>
	          <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	          <tr>
	            <td>
	              <div style="padding: 5px">
	              <table class="submain01" cellpadding="0" cellspacing="0">
	                <tr>
	                  <td class="tableheader02">Platform</th>
	                  <td class="tableheader02">Accepted files</th>
	                  <td class="tableheader02">Extension</th>
	                </tr>
	                <tr>
	                  <td class="cell01" valign="top" rowspan=3>Affymetrix</td>
	                  <td class="cell03" >Probe level intensity measurement file (required)</td>
	                  <td class="cell03" >CEL</td>
	                </tr>
	                <tr>
	                  <td class="cell03" >Probeset level normalized measurement file (MAS method)</td>
	                  <td class="cell03" >TXT</td>
	                </tr>
	                <tr>
	                  <td class="cell01" >Probeset level normalized measurement file (RMA or GC-RMA method)</td>
	                  <td class="cell01" >RMA, GMA</td>
	                </tr>
	                <tr>
	                  <td class="cell01" valign="top" rowspan=2>Illumina</td>
	                  <td class="cell03" >BeadStudio non-normalized probe data file (required)</td>
	                  <td class="cell03" >TXT</td>
	                </tr>
	                <tr>
	                  <td class="cell01" >BeadStudio normalized probe data file</td>
	                  <td class="cell01" >TXT</td>
	                </tr>
	                <tr>
	                  <td class="cell01" valign="top" rowspan=2>all</td>
	                  <td class="cell01">GEO series_matrix summary file</td>
	                  <td class="cell01">TXT</td>
	                </tr>
	                <tr>
	                  <td class="cell01" style="font-style:italic;">Archives containing one or more of the above</td>
	                  <td class="cell01">zip, tar.gz, tgz, tar</td>
	                </tr>
	              </table>
	              </div>
	            </td>
	          </tr>
	          <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	          <tr>
	            <td>
	              <table id="upload_file_table" width="100%" cellpadding="0" cellspacing="0" border="0">
	                <tr>
	                  <td class="cell03w100pct" id="file_browse_cell">$ind_file_upload_html</td>
		          <td id="add_files_cell"><input class="button01w115" type="button" name="add_files" value="ADD MORE FILES" onClick="addfilerows(this.form, maxfiles)"></td>
	                </tr>
	              </table>
	            </td>
	          </tr>
                  $germonline_array_html
                  $overwrite_html
	          <tr><td class="submit"><input class="submitw115" type="submit" value="UPLOAD FILES"></td></tr>
	          <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
                </table>
                $hidden_html
              </form>
            </td>
          </tr>
        </table>
      </td>
    </tr>
    <tr id="upload_progress_area" class="hidden">
      <td>
        <table class="maindisplay" align="center" cellpadding="0" cellspacing="0" border="0">
          <tr><td><img width="1" height="150" alt="" src="/images/spacer.gif"></td></tr>
	  <tr>
	    <td>
              <table class="submain01ctr" align="center" cellpadding="0" cellspacing="0" border="0">
                <tr><td class="tableheader02">File upload and processing in progress.<br>Please wait... (this may take a few minutes to an hour depending on the size of the upload)</td></tr>
                <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
                <tr>
                  <td>
                    <table align="center" cellpadding="4" cellspacing="4">
                      <tr>
	                <td id="box1"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box2"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box3"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box4"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box5"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box6"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box7"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box8"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box9"  class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box10" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box11" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box12" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box13" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box14" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	                <td id="box15" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
			<td id="box16" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
			<td id="box17" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
			<td id="box18" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
			<td id="box19" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
			<td id="box20" class="progress01"><img width="1" height="1" alt="" src="/images/spacer.gif"></td>
	              </tr>
                    </table>
                  </td>
                </tr>
              </table>
	    </td>
          </tr>
	  <tr><td><img width="1" height="10" alt="" src="/images/spacer.gif"></td></tr>
	  <tr><td class="warning">PLEASE DO NOT CLICK ANYWHERE ON THE PAGE UNTIL THE PROCESS IS COMPLETE.</td></tr>
	  <tr><td><img width="1" height="200" alt="" src="/images/spacer.gif"></td></tr>
	</table>
      </td>
    </tr>    
    HTML
    
    $jscript = <<"    JSCRIPT";
    var progressurl = "popup?page=file_progress&session_id=${session_id}";
    var fileobj     = $file_obj;
    var maxfiles    = @{[MIMAS_UPLOAD_MAX_NUM_FILES]};
    JSCRIPT
    
    $title         = 'Sample Data File Upload';
    $cache_control = 'no-store';
    $onunload      = 'if (window.file_progress_win) file_progress_win.close()';
    
}
elsif ($web_page eq 'sample_relations') {
    my $conditions   = $experiment->conditions;
    my $samples      = $experiment->samples;
    
    # user shouldn't get here without appropriate progress number and important data
    push @errors, 'No samples uploaded! Please complete file upload page.'      unless defined $experiment->samples;
    push @errors, 'Previous pages are not properly completed!  Please go back.' unless $experiment->progress >= $progress;
    $mimas_web->error(@errors) if @errors;
    
    # create JavaScript objects (see below to where we populate condition_obj)
    my ($condition_obj, $palette_obj) = ('{}', 'new Array()');
    
    # prepare HTML
    my ($condition_ids_html, $relations_html) = ('') x 2;
    if (defined $conditions) {
        
        
        my $hidden_html = <<"        HTML";
        <input type="hidden" name="session_id" value="$session_id">
	<input type="hidden" name="page" value="$web_page">
        HTML
        
        my $rel_rows_html;
        my $counter = 1;
        my $num_samples = scalar keys %{$samples};
        for my $sample (sort { lc($a->name) cmp lc($b->name) } values %{$samples}) {
	    
	    my $conditions_html = '<option></option>';
	    for my $condition (sort { $a->display_order <=> $b->display_order } values %{$conditions}) {
	        my $selected       = (defined $sample->condition and $sample->condition->dbID == $condition->dbID) ? 'selected' : '';
	        my $cond_name_html = $mimas_web->cgi->escapeHTML($condition->name);
	        $conditions_html  .= "<option value='@{[$condition->dbID]}' $selected>$cond_name_html</option>";
	    }
	    
	    my $td_class01 = $counter != $num_samples ? 'cell01' : 'cell03';
	    my $td_class02 = $counter != $num_samples ? 'cell02' : 'cell04';
	    
		my $sample_array = $sample->array ? $sample->array->display_name : "";
	    $rel_rows_html .= <<"            HTML";
	    <tr>
	      <td class="${td_class01}">@{[$mimas_web->cgi->escapeHTML($sample->name)]}</td>
	      <td class="${td_class01}ctr"><select name="condition_ids">$conditions_html</select></td>
	      <td class="${td_class02}ctr">@{[$mimas_web->cgi->escapeHTML($sample_array)]}</td>
	    </tr>
            HTML
	    
	    $hidden_html .= "<input type='hidden' name='sample_ids' value='@{[$sample->dbID]}'>";
	    
	    $counter++;
        }

    my $germonline_color_html = "";
    my $palette = orderedHash;
    if ($is_germonline_manager) {
	my $all_cond = $mimas_db->Upload->ExpConditionAdaptor->select_all_with_color();
	for my $condition (sort {lc $a->color cmp lc $b->color} values %$all_cond) {
	    $palette->{$condition->color} = 1;
	}

	my @PALETTE = qw(
		000000 303030 585858 808080 A0A0A0 C3C3C3 DCDCDC FFFFFF 400000 800000
		C00000 FF0000 FFC0C0 004000 008000 00C000 00FF00 C0FFC0 000080 0000C0
		0000FF C0C0FF 404000 808000 C0C000 FFFF00 FFFFC0 004040 008080 00C0C0
		00FFFF C0FFFF 800080 C000C0 FF00FF FFC0FF C05800 FF8000 FFA858 FFDCA8
		);
	for my $color (@PALETTE) {
	    $palette->{$color} = 1;
	}

        my $col_rows_html;
        my $counter = 1;
        my $num_lines = scalar keys %{$conditions};
        for my $condition (sort { lc($a->display_order) cmp lc($b->display_order) } values %{$conditions}) {
	    my $td_class01 = $counter != $num_lines ? 'cell01' : 'cell03';
	    my $td_class02 = $counter != $num_lines ? 'cell02' : 'cell04';
	    
	    my $color_html = defined $condition->color ? $mimas_web->cgi->escapeHTML($condition->color) : "";
	    $col_rows_html .= <<"            HTML";
	    <tr>
	      <td class="${td_class01}">@{[$mimas_web->cgi->escapeHTML($condition->name)]}</td>
	      <td class="${td_class02}ctr">
		  <table><tr>
		  <td>
		  #<input type="text" name='color_@{[$condition->dbID]}' id='color_@{[$condition->dbID]}' value='$color_html' size='6' maxlength='6' onkeyup="syncConditionColor('color_@{[$condition->dbID]}', 'color_box_@{[$condition->dbID]}')" onchange="this.value=this.value.toUpperCase()">
		  </td>
		  <td id='color_box_@{[$condition->dbID]}' style='background-color:#$color_html; width:10px; height:10px; border:solid 1px' onclick="pickConditionColor('color_@{[$condition->dbID]}', 'color_box_@{[$condition->dbID]}', 'palette_box_@{[$condition->dbID]}')">
		  </td>
		  <td id='palette_box_@{[$condition->dbID]}'>
		  </td>
		  </tr></table>
	      </td>
	    </tr>
            HTML
	    
	    $counter++;
        }
        $germonline_color_html = <<"        HTML";
	        <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
                <tr><td class="tableheader01">Experimental Condition Display Colors [Germonline manager mode]</td></tr>
	        <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	        <tr><td class="tablespacer01">
		<input type="hidden" name="condition_colors" value="1">
              <table class="submain01" cellpadding="0" cellspacing="0" border="0">
	        <tr>
	          <td>
	            <table width="100%" cellpadding="0" cellspacing="0" border="0">
	              <tr>
		        <td class="colheader01ctr">Experimental Condition</td>
	                <td class="colheader01">HTML color code</td>
	              </tr>
		      $col_rows_html
	            </table>
	          </td>
	        </tr>
              </table>
	      </td></tr>
        HTML
    }
        
        $relations_html = <<"        HTML";
        <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
        <tr>
          <td>
            <form name="sample_relations" method="post" action="$base/upload" onSubmit="return checksamplerelations(this, conditionobj)" onReset="if (confirm('Reset entire page and start over?')) location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}'); else return false">
              <table class="submain01" cellpadding="0" cellspacing="0" border="0">
                <tr><td class="tableheader01">Describe Sample Relationships</td></tr>
	        <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	        <tr>
	          <td>
	            <table width="100%" cellpadding="0" cellspacing="0" border="0">
	              <tr>
	                <td class="colheader01">Sample</td>
		        <td class="colheader01ctr">Experimental Condition</td>
		        <td class="colheader02ctr">Microarray</td>
	              </tr>
		      $rel_rows_html
	            </table>
	          </td>
	        </tr>
		$germonline_color_html
	        <tr><td class="submit"><input class="submitw115" type="submit" value="SUBMIT"></td></tr>
	        <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
              </table>
              $hidden_html
            </form>
          </td>
        </tr>
        HTML
        
        # populate JavaScript objects and some extra HTML
        
        $condition_obj = '{';
        for my $condition (sort { $a->display_order <=> $b->display_order } values %{$conditions}) {
            my $cond_name_html   = $mimas_web->cgi->escapeHTML($condition->name);
	    $condition_ids_html .= "<option value='@{[$condition->dbID]}'>$cond_name_html</option>";
	    
            # populate JavaScript object
	    my $condname    = escapeJS($condition->name);
            $condition_obj .= " @{[$condition->dbID]}: \"$condname\",";
        }
        chop $condition_obj; #{
        $condition_obj .= ' }';

        $palette_obj = 'new Array(';
        for my $colorn (keys %{$palette}) {
            # populate JavaScript object
	    my $color    = escapeJS($colorn);
            $palette_obj .= " '$color',";
        }
        $palette_obj =~ s/,$//;
        $palette_obj .= ' )';
    }

    my $display_relation_setup = $conditions && %$conditions ? "display:none" : "";
    
    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="$web_page">
    HTML

    
    $body = <<"    HTML";
    <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <form name="relation_setup" method="post" action="$base/upload" onSubmit="return checkrelationsetup(this, conditionobj)" onReset="if (confirm('Reset entire page and start over?')) location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}'); else return false">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
            <tr><td class="tableheader01">Create &amp; Manage Experimental Conditions</td></tr>
	    <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
            <tr>
              <td>
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
	          <tr>
	            <td class="cell01w60pct"><input class="w100pct" type="text" name="condition_input"></td>
	            <td class="cell02"><input class="button01w100" type="button" value="CREATE" onClick="addcondition(this.form)"></td>
	          </tr>
	          <tr>
	            <td class="cell01w60pct" rowspan="4"><select multiple class="w100pct" name="condition_ids" size="8">$condition_ids_html</select></td>
	            <td class="cell04"><input class="button01w100" type="button" value="RENAME" onClick="renamecondition(this.form)"></td>
	          </tr>
	          <tr>
	            <td class="cell04"><input class="button01w100" type="button" value="DELETE" onClick="deletecondition(this.form)"></td>
	          </tr>
	          <tr>
	            <td class="cell04"><input class="button01w100" type="button" value="MOVE UP &uarr;" onClick="moveconditionup(this.form)"></td>
	          </tr>
	          <tr>
	            <td class="cell02"><input class="button01w100" type="button" value="MOVE DOWN &darr;" onClick="moveconditiondown(this.form)"></td>
	          </tr>
	        </table>
	      </td>
            </tr>
	    <tr><td class="submit"><input class="submitw170" type="submit" value="SET UP RELATIONSHIPS"></td></tr>
	    <tr><td class="reset"><input class="resetw170" type="reset" value="Reset"></td></tr>
          </table>
          $hidden_html
        </form>
	<br>
	<br>
        <form name="relation_setup2" method="post" action="$base/upload" onSubmit="return confirm('Are you sure you want to assign each sample to a different conditions, i.e. no replicates?')" style="$display_relation_setup">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
	    <tr><td class="submit">If you have no replicates, you may instead automatically create conditions based on sample names: <input class="submitwide" name="autogenerate_conditions" type="submit" value="AUTOMATICALLY CREATE ONE CONDITION PER SAMPLE"></td></tr>
          </table>
          $hidden_html
        </form>
      </td>
    </tr>
    $relations_html
    HTML
    
    $jscript = <<"    JSCRIPT";
    var conditionobj = $condition_obj;
    var paletteobj = $palette_obj;
    JSCRIPT
    
    $title         = 'Sample Relationships';
    $cache_control = 'no-store';
    $onunload      = '';
    
}
elsif ($web_page eq 'exp_info') {
    my $attr_groups    = $mimas_db->Library->AttrGroupAdaptor->select_all();
    my $attributes     = $mimas_db->Library->AttributeAdaptor->select_all_attrs_by_webpage('experiment information');
    my $exp_attributes = $experiment->attributes;
    my $conditions     = $experiment->conditions;
    my $samples        = $experiment->samples;
    my $working_data   = $edited_user->working_data;
    
    # user shouldn't get here without appropriate progress number and important data
    push @errors, 'No samples uploaded! Please complete file upload page.'                         unless defined $experiment->samples;
    push @errors, 'No experimental conditions defined! Please complete sample relationships page.' unless defined $experiment->conditions;
    push @errors, 'Previous pages are not properly completed!  Please go back.'                    unless $experiment->progress >= $progress;
    $mimas_web->error(@errors) if @errors;
    
    # data structure processing
    my $grouped_attrs;
    my $attrs_obj = '{';
    for my $attribute (sort { $a->dbID <=> $b->dbID } values %{$attributes}) {
        push @{$grouped_attrs->{$attribute->attr_group->dbID}}, $attribute;
	
	# create JavaScript object
	$attrs_obj .= " \"attr_values_@{[$attribute->dbID]}\": {";
	my $name    = escapeJS($attribute->name);
	$attrs_obj .= " name: \"$name\",";
        $attrs_obj .= ' required: 1,'   if $attribute->required eq 'required';
        $attrs_obj .= ' is_numeric: 1,' if $attribute->is_numeric;
        chop $attrs_obj; #{
        $attrs_obj .= ' },';
    }
    chop $attrs_obj; #{
    $attrs_obj .= ' }';
    undef $attributes;
    
    my $temp_exp_attributes;
    for my $exp_attribute (values %{$exp_attributes}) {
        if (defined $exp_attribute->detail and $exp_attribute->attribute->upload_form_type eq 'select-multiple') {
	    $temp_exp_attributes->{$exp_attribute->attribute->dbID}->{$exp_attribute->detail->dbID} = $exp_attribute;
	} else {
	    $temp_exp_attributes->{$exp_attribute->attribute->dbID} = $exp_attribute;
	}
    }
    $exp_attributes = $temp_exp_attributes;
    undef $temp_exp_attributes;
    
    my $has_replicates = scalar (values %{$samples}) > scalar(values %{$conditions});
    
    # prepare HTML
    # MIAME and MIMAS Experiment Information
    my $exp_info_html;
    for my $attr_group (sort { $a->upload_display_order <=> $b->upload_display_order } values %{$attr_groups}) {
        
        next unless defined $grouped_attrs->{$attr_group->dbID};
        
	my $group_name_html = $mimas_web->cgi->escapeHTML($attr_group->name);
	
        $exp_info_html .= <<"        HTML";
        <tr><td class="tablespacer01" colspan="2"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	<tr><td class="tableheader02" colspan="2">$group_name_html</td></tr>
	<tr><td class="tablespacer01" colspan="2"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
        HTML
        
        my $counter   = 1;
        my $num_attrs = scalar @{$grouped_attrs->{$attr_group->dbID}};
        for my $attribute (sort by_order_then_name @{$grouped_attrs->{$attr_group->dbID}}) {
            my $td_class01       = $counter != $num_attrs ? 'cell01w25pct' : 'cell03w25pct';
            my $td_class02       = $counter != $num_attrs ? 'cell02'       : 'cell04';
	    my $title_html       = $mimas_web->cgi->escapeHTML(defined $attribute->description ? $attribute->description : '');
	    my $attr_name_html   = $mimas_web->cgi->escapeHTML($attribute->name);
	    my $is_required_html = $attribute->required eq 'required' ? "<img width='3' height='1' alt='' src='/images/spacer.gif'><span class='asterisk'>*</span>" : '';
	    
            $exp_info_html .= "<tr><td class='${td_class01}'><span class='attribute01' title='$title_html'>$attr_name_html</span>$is_required_html</td>";
	    
	    # create input field for attribute if needs radio, select, or select-multiple element
	    if ($attribute->upload_form_type =~ /^(select|radio)/) {
	        # general case (attribute has values described in MIMAS library)
	        if (defined $attribute->details) {
	            # flag needed if we have user-defined values for this attribute and if any of these are selected
		    my ($user_defined, $detail_selected);
		    if (defined $working_data                                                               and
                        defined $working_data->{upload}                                                     and
                        defined $working_data->{upload}->{$experiment->dbID}                                and
                        defined $working_data->{upload}->{$experiment->dbID}->{details}                     and
                        defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID} and
                        defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}) {
                        $user_defined++;
		        for my $value (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
                            if ($value->{selected}) { $detail_selected++; last }
                        }
                    }
		
		    if ($attribute->upload_form_type eq 'select-one') {
		        my $db_value_id = (defined $exp_attributes                     and
			                   defined $exp_attributes->{$attribute->dbID} and
					   defined $exp_attributes->{$attribute->dbID}->detail)
		                             ? $exp_attributes->{$attribute->dbID}->detail->dbID
				             : undef;
			
			# special flags needed for "Replicate Type" depending on number of replicates
		        # special flags needed for "Laboratory", "Organization"
			my $force_no_repl = ($attribute->is_attribute and lc($attribute->name) eq lc 'Replicate Type' and !$has_replicates) ? 1 : 0;
			my $skip_no_repl  = ($attribute->is_attribute and lc($attribute->name) eq lc 'Replicate Type' and  $has_replicates) ? 1 : 0;
			my $laboratory    = ($attribute->is_attribute and lc($attribute->name) eq lc 'Laboratory/Group Name'              ) ? 1 : 0;
			my $organization  = ($attribute->is_attribute and lc($attribute->name) eq lc 'Organization'                       ) ? 1 : 0;

			# custom JavaScript depending on attribute or whether the select element has an "other" option
		        my $onchange   =  $attribute->other ? "onChange='checkselectone(this)'" : '';
			my $disabled   = ($force_no_repl)
			                    ? "class='disabled' disabled" 
					    : '';
			my $blank_html = $attribute->required eq 'required'
			                   ? "<option class='italic' value=''>Choose one...</option>"
					   : "<option class='italic' value=''>@{[MIMAS_NONE_NA_OPTION]}</option>";
            my $options_html = '';
            my $previous_other_html = '';
						
			for my $value (sort by_order_then_name values %{$attribute->details}) {
		            next if $skip_no_repl and lc($value->name) eq 'no replicates';
			    my $selected = $force_no_repl          ? (lc($value->name) eq 'no replicates'                     ? 'selected' : '') :
					   $laboratory             ? ($value->name eq $edited_user->lab->name                 ? 'selected' : '') :
					   $organization           ? ($value->name eq $edited_user->lab->organization->name   ? 'selected' : '') :
		                           defined $exp_attributes ? ((defined $db_value_id and $value->dbID == $db_value_id) ? 'selected' : '') :
					   !$detail_selected       ? ($value->default                                         ? 'selected' : '') : '';
			    my $value_html  = $mimas_web->cgi->escapeHTML($value->name);
			    $options_html .= "<option value='@{[$value->dbID]}' $selected>$value_html</option>";
                            $detail_selected++ if $selected;
		        }
			
			if ($attribute->none_na) {
			    my $selected    = ($attribute->required eq 'required' and !$detail_selected and defined $exp_attributes) ? 'selected' : '';
			    $options_html .= "<option id='option_none_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}' $selected>@{[MIMAS_NONE_NA_OPTION]}</option>";
			}
						
		        $options_html .= "<option id='option_other_attr_values_@{[$attribute->dbID]}' class='itbld'>Other...</option>" if $attribute->other;
                        
			if ($user_defined) {
			    $options_html .= "<optgroup id='optgroup_user_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
			    for my $value (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
			        my $selected    = $value->{selected} ? 'selected' : '';
				my $value_html  = $mimas_web->cgi->escapeHTML($value->{name});
                $previous_other_html = $value_html if $value->{selected};
				$options_html .= "<option value='$value_html' $selected>$value_html</option>";
			    }
			    $options_html .= "</optgroup>";
			}
			
			$exp_info_html .= "<td class='${td_class02}'><select name='attr_values_@{[$attribute->dbID]}' $onchange $disabled _previous_other_value='$previous_other_html'>$blank_html";
			$exp_info_html .= $options_html;
			$exp_info_html .= "</select></td>";
	            } 
		    elsif ($attribute->upload_form_type eq 'select-multiple') {
	                # special popup and select element IDs for "Experimental Factors"
			my ($popup_url, $target_id, $source_id);
                        my $seen_mage_name;
			if ($attribute->is_attribute and lc($attribute->name) eq 'experimental factors') {
			    $popup_url = 'newfactorurl';
			    $target_id = 'exp_factors_target';
			    $source_id = 'exp_factors_source';
			} else {
			    $popup_url = 'null';
			    $target_id = '';
			    $source_id = '';
			}
			
			my ($pick_attr_values_html, $selected_attr_values_html) = ('') x 2;
            my $pick_optgroup;
            my $select_size = 6;
			for my $value (sort by_detail_group_order_then_order_then_name values %{$attribute->details}) {
                my $attr_detail_group = $value->group;
                my $optgroup_attr = $attr_detail_group ? "_mimas_optgroup='optgroup_agrp_pick_attr_values_@{[$attr_detail_group->dbID]}'" : "";
			    my $value_html = $mimas_web->cgi->escapeHTML($value->name);
                my $mage_name = $value->mage_name || "";
                my $mage_name_attr = $mage_name ? "_mimas_mage_name='$mage_name'" : "";
                $seen_mage_name++ if $mage_name;
			    if (defined $exp_attributes
                    and defined $exp_attributes->{$attribute->dbID}
                    and defined $exp_attributes->{$attribute->dbID}->{$value->dbID}
                    or
                    !defined $exp_attributes and !$detail_selected and $value->default) {
				    $selected_attr_values_html .= "<option $optgroup_attr $mage_name_attr value='@{[$value->dbID]}'>$value_html</option>";
				    $detail_selected++;
				} else {
                    if ($attr_detail_group) {
                        if ($pick_optgroup and $attr_detail_group->dbID ne $pick_optgroup) {
                            $pick_attr_values_html .= "</optgroup>";
                        }
                        if (!$pick_optgroup or $attr_detail_group->dbID ne $pick_optgroup) {
                            $pick_attr_values_html .= "<optgroup id='optgroup_agrp_pick_attr_values_@{[$attr_detail_group->dbID]}' class='itbld' label='@{[$attr_detail_group->name]}'>";
                            $select_size = 15;
                        }
                        $pick_optgroup = $attr_detail_group->dbID;
                    }
                    elsif ($pick_optgroup) {
                        $pick_attr_values_html .= "</optgroup>";
                        $pick_optgroup = undef;
                    }

				    $pick_attr_values_html     .= "<option $optgroup_attr $mage_name_attr value='@{[$value->dbID]}'>$value_html</option>";
				}
			}
            if ($pick_optgroup) {
                $pick_attr_values_html .= "</optgroup>";
            }
			
			if ($attribute->none_na) {
			    if ($attribute->required eq 'required' and !$detail_selected and defined $exp_attributes) {
			        $selected_attr_values_html .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
			    } else {
			        $pick_attr_values_html     .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
			    }
			}
			
			$pick_attr_values_html .= "<option id='option_other_pick_attr_values_@{[$attribute->dbID]}' class='itbld'>Other...</option>" if $attribute->other;
			
			if ($user_defined) {
			    my ($pick_optgroup_exists, $selected_optgroup_exists);
			    for my $value (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
			        my $value_html  = $mimas_web->cgi->escapeHTML($value->{name});
				if ($value->{selected}) {
				    unless ($selected_optgroup_exists) {
				        $selected_attr_values_html .= "<optgroup id='optgroup_user_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					$selected_optgroup_exists++;
				    }
				    $selected_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				} else {
				    unless ($pick_optgroup_exists) {
				        $pick_attr_values_html .= "<optgroup id='optgroup_user_pick_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					$pick_optgroup_exists++;
				    }
				    $pick_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				}
			    }
			    $pick_attr_values_html     .= "</optgroup>" if $pick_optgroup_exists;
			    $selected_attr_values_html .= "</optgroup>" if $selected_optgroup_exists;
			}
                        my $textarea = $seen_mage_name ? qq(<div class='attrdescription'><textarea id='attrdescription_@{[$attribute->dbID]}' rows='2' readonly></textarea></div>) : "";
			
			$exp_info_html .= <<"                        HTML";
			<td class="${td_class02}nopad">
			  <table width="100%" cellpadding="0" cellspacing="0" border="0">
                            <tr>
                              <td class="cell03w50pct" rowspan="2"><select multiple class="w100pct" id="$source_id" name="pick_attr_values_@{[$attribute->dbID]}" size="$select_size" ondblclick="checkselectmulti(this.form, 'pick_attr_values_@{[$attribute->dbID]}', 'attr_values_@{[$attribute->dbID]}')" onchange="setAttrDescription('attrdescription_@{[$attribute->dbID]}', this)">$pick_attr_values_html</select></td>
                              <td class="cell01ctrwmin"><input class="button01w60" type="button" value="ADD &rarr;" onClick="checkselectmulti(this.form, 'pick_attr_values_@{[$attribute->dbID]}', 'attr_values_@{[$attribute->dbID]}', $popup_url)"></td>
                              <td class="cell04w50pct" rowspan="2"><select multiple class="w100pct" id="$target_id" name="attr_values_@{[$attribute->dbID]}" size="$select_size" ondblclick="checkselectmulti(this.form, 'attr_values_@{[$attribute->dbID]}', 'pick_attr_values_@{[$attribute->dbID]}')" onchange="setAttrDescription('attrdescription_@{[$attribute->dbID]}', this)">$selected_attr_values_html</select></td>
                            </tr>
                            <tr>
                              <td class="cell03ctrwmin"><input class="button01w60" type="button" value="&larr; REMOVE" onClick="checkselectmulti(this.form, 'attr_values_@{[$attribute->dbID]}', 'pick_attr_values_@{[$attribute->dbID]}')"></td>
                            </tr>
                          </table>
                          $textarea
		        </td>
                        HTML
	            }
		    elsif ($attribute->upload_form_type eq 'radio') {
		        my $db_value_id = (defined $exp_attributes                     and
			                   defined $exp_attributes->{$attribute->dbID} and
					   defined $exp_attributes->{$attribute->dbID}->detail)
		                             ? $exp_attributes->{$attribute->dbID}->detail->dbID
				             : undef;
		        
		        my $id = 1;
			$exp_info_html .= "<td class='${td_class02}'>";
			for my $value (sort by_order_then_name values %{$attribute->details}) {
			    my $checked = defined $exp_attributes ? ((defined $db_value_id and $value->dbID == $db_value_id) ? 'checked' : '') :
			                  $value->default         ? 'checked'                                                                  : '';
			    my $value_html  = $mimas_web->cgi->escapeHTML($value->name);
			    $exp_info_html .= "<input type='radio' id='radio_${id}_@{[$attribute->dbID]}' name='attr_values_@{[$attribute->dbID]}' value='@{[$value->dbID]}' $checked><label for='radio_${id}_@{[$attribute->dbID]}'>$value_html</label>";
			    $id++;
			}
			$exp_info_html .= "</td>";
		    }
		    else {
	                $exp_info_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	            }
	        }
	        # special case for "Reference Experimental Condition" because we get this list from user input in "sample_relations"
	        elsif ($attribute->is_attribute and lc($attribute->name) eq 'reference experimental condition') {
	            my $init_value = (defined $exp_attributes and defined $exp_attributes->{$attribute->dbID})
		                        ? $exp_attributes->{$attribute->dbID}->char_value
					: undef;
		    
		    $exp_info_html .= "<td class='${td_class02}'><select name='attr_values_@{[$attribute->dbID]}'><option class='italic' value=''>Choose one...</option>";
		    for my $condition (sort { $a->display_order <=> $b->display_order } values %{$conditions}) {
		        my $selected       = defined $init_value ? ($condition->name eq $init_value ? 'selected' : '') : '';
		        my $cond_name_html = $mimas_web->cgi->escapeHTML($condition->name);
		        $exp_info_html    .= "<option value='$cond_name_html' $selected>$cond_name_html</option>";
		    }
		    
		    if ($attribute->none_na) {
		        my $selected    = (!defined $init_value and defined $exp_attributes) ? 'selected' : '';
			$exp_info_html .= "<option id='option_none_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}' $selected>@{[MIMAS_NONE_NA_OPTION]}</option>";
		    }
		    
		    $exp_info_html .= "</select></td>";
	        }
		else {
	            $exp_info_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	        }
	    } 
	    # create input field for attribute if needs text or textarea element
	    elsif ($attribute->upload_form_type =~ /^text/) {
	        my $value = (defined $exp_attributes and defined $exp_attributes->{$attribute->dbID})
	                       ? (defined $exp_attributes->{$attribute->dbID}->char_value    ? $exp_attributes->{$attribute->dbID}->char_value    : 
			          defined $exp_attributes->{$attribute->dbID}->numeric_value ? $exp_attributes->{$attribute->dbID}->numeric_value : '')
			       : '';
	        
	        my $class;
	        my $readonly = '';
	        
	        unless ($value) {
		    # special case for "Author(s)" since we can initially put user name if there isn't one already
	            if ($attribute->is_attribute and lc($attribute->name) eq 'author(s)') {
		        $value = "@{[$edited_user->first_name]} @{[$edited_user->last_name]}";
		    }
	        }
	        
	        my $value_html = $mimas_web->cgi->escapeHTML($value);
	        
	        if ($attribute->upload_form_type eq 'text') {
		    $class = $attribute->is_numeric ? 'numeric01' : 'w100pct' unless $class;
		    
		    $exp_info_html .= "<td class='${td_class02}'><input class='$class' type='text' name='attr_values_@{[$attribute->dbID]}' value='$value_html' $readonly>";
		    
	            # create units select element for attribute if needed
		    # (right now only text input elements would ever need units)
		    if (defined $attribute->details) {
		        # flag needed if we have user-defined units for this attribute and if any of these are selected
		        my ($user_defined, $detail_selected);
			if (defined $working_data                                                               and
			    defined $working_data->{upload}                                                     and
			    defined $working_data->{upload}->{$experiment->dbID}                                and
			    defined $working_data->{upload}->{$experiment->dbID}->{details}                     and
			    defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID} and
			    defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}) {
                            $user_defined++;
			    for my $unit (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
			        if ($unit->{selected}) { $detail_selected++; last }
			    }
			}
			
			my $db_unit_id = (defined $exp_attributes                     and
			                  defined $exp_attributes->{$attribute->dbID} and
					  defined $exp_attributes->{$attribute->dbID}->detail)
		                            ? $exp_attributes->{$attribute->dbID}->detail->dbID
				            : undef;
		        
		        $exp_info_html .= "<select name='attr_units_@{[$attribute->dbID]}' onChange='checkselectone(this)'>";
		        for my $unit (sort by_order_then_name values %{$attribute->details}) {
	                    my $selected    = defined $db_unit_id ? ($unit->dbID == $db_unit_id ? 'selected' : '') :
			                      !$detail_selected   ? ($unit->default             ? 'selected' : '') : '';
			    my $unit_html   = $mimas_web->cgi->escapeHTML($unit->name);
			    $exp_info_html .= "<option value='@{[$unit->dbID]}' $selected>$unit_html</option>";
			    $detail_selected++ if $selected;
	                }
		        
		        # users not allowed to create new units anymore
		        # $exp_info_html .= "<option id='option_other_attr_units_@{[$attribute->dbID]}' class='itbld'>Other...</option></select>";
			
			if ($user_defined) {
			    $exp_info_html .= "<optgroup id='optgroup_user_attr_units_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
			    for my $unit (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
			        my $selected    = $unit->{selected} ? 'selected' : '';
				my $unit_html   = $mimas_web->cgi->escapeHTML($unit->{name});
				$exp_info_html .= "<option value='$unit_html' $selected>$unit_html</option>";
			    }
			    $exp_info_html .= "</optgroup>";
			}
			
		        $exp_info_html .= "</select>";
		    }
		    
		    $exp_info_html .= "</td>";
	        }
	        elsif ($attribute->upload_form_type eq 'textarea') {
	            $exp_info_html .= "<td class='${td_class02}'><textarea class='w100pct' rows='4' wrap='soft' name='attr_values_@{[$attribute->dbID]}' $readonly>$value_html</textarea></td>";
	        }
		else {
	            $exp_info_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	        }
		
	    }
	    else {
	        $exp_info_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	    }
	    
	    $exp_info_html .= "</tr>";
	    $counter++;
        }
    }

    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="$web_page">
    HTML
    
    $body = <<"    HTML";
    <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <form name="exp_info" method="post" action="$base/upload" onSubmit="return checkattrs(this, attrsobj)" onReset="if (confirm('Reset entire page and start over?')) location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}'); else return false">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
            <tr><td class="tableheader01">Experiment Information</td></tr>
	    <tr>
	      <td>
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
	          $exp_info_html
	        </table>
	      </td>
	    </tr>
	    <tr><td class="submit"><input class="submitw115" type="submit" value="SUBMIT"></td></tr>
	    <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
          </table>
          $hidden_html
        </form>
      </td>
    </tr>
    HTML
    
    $jscript = <<"    JSCRIPT";
    var attrsobj     = $attrs_obj;
    var newfactorurl = "popup?page=new_factor&session_id=${session_id}";
    JSCRIPT
    
    $title         = 'Experiment Information (MIAME)';
    $cache_control = '';
    $onunload      = 'if (window.popup_win) popup_win.close()';
    
}
elsif ($web_page eq 'exp_permissions') {
    
    # user shouldn't get here without appropriate progress number and important data
    push @errors, 'No samples uploaded! Please complete file upload page.'                         unless defined $experiment->samples;
    push @errors, 'No experimental conditions defined! Please complete sample relationships page.' unless defined $experiment->conditions;
    push @errors, 'No experiment information!  Please complete the experiment information page.'   unless defined $experiment->attributes;
    push @errors, 'Previous pages are not properly completed!  Please go back.'                    unless $experiment->progress >= $progress;
    
    $mimas_web->error(@errors) if @errors;

    #MIMAS Experiment Permissions

    my $all_groups = $mimas_db->User->GroupAdaptor->select_all;
    my %all_non_empty_groups;

    my $groups_info = {};
    for my $group (values %$all_groups) {
        my $info = $group->description;
        my $restrict_level = $group->restrict_level || "";
        if ($restrict_level eq 'lab') {
            $info .= " (" . $edited_user->lab->name . ")";
        }
        if ($restrict_level eq 'organization') {
            $info .= " (" . $edited_user->lab->organization->name . ")";
        }
        if ($restrict_level eq 'facility') {
            for my $attr (values %{$experiment->attributes}) {
                if (lc $attr->attribute->name eq lc 'Microarray Facility') {
                    $info .= " (" . $attr->detail->name . ")";
                }
            }
        }
        $info .= ".";
        my @members = values %{$group->users($experiment) || {} };
        if (@members) {
            $all_non_empty_groups{$group->dbID} = $group;
        }

        unless ($group->is_system or $group->dbID == 3) { #MIMAS Registered Users -- don't divulge list of all members!
            $info .= "\nCurrent members: ";
            my $members = join "; ", map {$_->short_name} sort {$a->full_name_reversed cmp $b->full_name_reversed} @members;
            $info .= $members || "none";
        }

        $groups_info->{$group->dbID} = $info;
    }

    $groups_info = toJSON ($groups_info);

    my $read_groups = $experiment->read_groups;
    my $write_groups = $experiment->write_groups;

    my ($selected_read_groups_html, $selected_write_groups_html, $pick_groups_html, $hidden_groups_html) = ('') x 4;

    for my $group (values %$read_groups) {
        next if exists $write_groups->{$group->dbID};
        if (!$group->is_system and $group->users($experiment)) {
            $selected_read_groups_html .= "<option value='@{[$group->dbID]}'>@{[$group->name]}</option>";
        }
        else {
            $hidden_groups_html .= "<input type='hidden' name='read_groups2' value='@{[$group->dbID]}'>\n";
        }
    }
    for my $group (values %$write_groups) {
        if (!$group->is_system and $group->users($experiment)) {
            $selected_write_groups_html .= "<option value='@{[$group->dbID]}'>@{[$group->name]}</option>";
        }
        else {
            $hidden_groups_html .= "<input type='hidden' name='write_groups2' value='@{[$group->dbID]}'>\n";
        }
    }

    for my $group (sort {uc $a->name cmp uc $b->name} values %$all_groups) {
        next if exists $write_groups->{$group->dbID};
        next if exists $read_groups->{$group->dbID};
        my $users = $group->users($experiment);
        if (!$group->is_system and $users and %$users) {
            $pick_groups_html .= "<option value='@{[$group->dbID]}'>@{[$group->name]}</option>";
        }
        else {
        }
    }


    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="$web_page">
    HTML
    
    $body = <<"    HTML";
    <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <form name="exp_info" method="post" action="$base/upload" onSubmit="return checkpermissions(this)" onReset="if (confirm('Reset entire page and start over?')) location.replace('@{[$mimas_web->cgi->url(-absolute => 1, -query => 1)]}'); else return false">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
            <tr><td class="tableheader01">Experiment Permissions</td></tr>
	    <tr>
	      <td>
            <input type="hidden" name="process_groups" value="1">
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
                  <tr>
                    <td class="cell02nopad">
                      <table width="100%" cellpadding="0" cellspacing="0" border="0">
                        <tr>
                          <td class="cell04nopad cell04ctr cell04w25pct">Groups without data access</td>
                          <td class="cell02nopad cell02ctr"></td>
                          <td class="cell04nopad cell04ctr cell04w25pct">Groups with read-only access</td>
                          <td class="cell02nopad cell02ctr"></td>
                          <td class="cell04nopad cell04ctr cell04w25pct">Groups with read and write access</td>
                        </tr>
                        <tr>
                          <td class="cell03" rowspan="2"><select multiple class="w100pct" name="pick_groups" size="4" onChange='clearselect(this.form, "read_groups"); clearselect(this.form, "write_groups"); setgroupinfo(this, this.form.elements["group_info_area"])' ondblclick="checkselectmulti(this.form, 'pick_groups', 'read_groups')">$pick_groups_html</select></td>
                          <td class="cell01ctrwmin"><input class="button01w60" type="button" value="ADD &rarr;" onClick="checkselectmulti(this.form, 'pick_groups', 'read_groups')"></td>
                          <td class="cell03" rowspan="2"><select multiple class="w100pct" id="read_groups" name="read_groups" size="4" onChange='clearselect(this.form, "pick_groups"); clearselect(this.form, "write_groups"); setgroupinfo(this, this.form.elements["group_info_area"])' ondblclick="checkselectmulti2(this.form, new Array('read_groups', 'write_groups'), 'pick_groups')">$selected_read_groups_html</select></td>
                          <td class="cell01ctrwmin"><input class="button01w60" type="button" value="ADD &rarr;" onClick="checkselectmulti2(this.form, new Array('read_groups', 'pick_groups'), 'write_groups')"></td>
                          <td class="cell04" rowspan="2"><select multiple class="w100pct" id="write_groups" name="write_groups" size="4" onChange='clearselect(this.form, "pick_groups"); clearselect(this.form, "read_groups"); setgroupinfo(this, this.form.elements["group_info_area"])'>$selected_write_groups_html</select></td>
                        </tr>
                        <tr>
                          <td class="cell03ctrwmin"><input class="button01w60" type="button" value="&larr; REMOVE" onClick="checkselectmulti2(this.form, new Array('read_groups', 'write_groups'), 'pick_groups')"></td>
                          <td class="cell03ctrwmin"><input class="button01w60" type="button" value="&larr; REMOVE" onClick="checkselectmulti(this.form, 'write_groups', 'read_groups')"></td>
                        </tr>
                      </table>
                      $hidden_groups_html
                    </td>
	          </tr>
                  <tr>
                    <td class="cell02">
                        <textarea rows="4" name="group_info_area" id="group_info_area" class="w100pct disabled" onkeypress="return false"></textarea>
                        <script type="text/javascript">document.getElementById("group_info_area").value="Click on a group name above to display here the list of current members"</script>
                    </td>
	          </tr>
	        </table>
	      </td>
	    </tr>
	    <tr><td class="submit"><input class="submitw115" type="submit" value="SUBMIT"></td></tr>
	    <tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
          </table>
          $hidden_html
        </form>
      </td>
    </tr>
    HTML
    
    $jscript = <<"    JSCRIPT";
    var groups_info = $groups_info;
    JSCRIPT
    
    $title         = 'Experiment Information (MIAME)';
    $cache_control = '';
    $onunload      = 'if (window.popup_win) popup_win.close()';
    
}
elsif ($web_page eq 'sample_attrs') {
    my $attr_groups  = $mimas_db->Library->AttrGroupAdaptor->select_all();
    my $attributes   = $mimas_db->Library->AttributeAdaptor->select_all_attrs_by_webpage('sample attributes');
    my $conditions   = $experiment->conditions;
    my $samples      = $experiment->samples;
    my $factors      = $experiment->factors;
    my $working_data = $edited_user->working_data;
    
    my $user_defined_factors;
    if (defined $working_data                                and
        defined $working_data->{upload}                      and
        defined $working_data->{upload}->{$experiment->dbID} and
        defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
        $user_defined_factors++;
    }
    
    # user shouldn't get here without appropriate progress number and important data
    push @errors, 'No samples uploaded! Please complete file upload page.'                         unless defined $experiment->samples;
    push @errors, 'No experimental conditions defined! Please complete sample relationships page.' unless defined $experiment->conditions;
    push @errors, 'No experiment information!  Please complete the experiment information page.'   unless defined $experiment->attributes and (defined $experiment->factors or $user_defined_factors);
    push @errors, 'Previous pages are not properly completed!  Please go back.'                    unless $experiment->progress >= $progress;
    
    ## authenticate sample, fill sample, and exp condition if parameters were passed in GET
    ## also make sure that if sample is passed without condition, then proper condition is selected
    if (defined $params->{condition_id}) {
        if (defined $conditions->{$params->{condition_id}} and
	    defined $conditions->{$params->{condition_id}}->samples) {
            push @errors, 'Invalid sample!' if defined $params->{sample_id} and !defined $conditions->{$params->{condition_id}}->samples->{$params->{sample_id}};
        } else {
            push @errors, 'Invalid experimental condition!';
        }
    } elsif (defined $params->{sample_id}) {
        my $sample = $samples->{$params->{sample_id}};
        if (defined $sample and defined $sample->condition) {
            $params->{condition_id} = $sample->condition->dbID;
        } else {
            push @errors, 'Invalid sample!';
        }
    }
    push @errors, 'Invalid fill sample!' if defined $params->{fill_sample_id} and !defined $samples->{$params->{fill_sample_id}};
    $mimas_web->error(@errors) if @errors;
    
    # determine the target condition, target sample, and fill sample we are working on in the page
    my @sorted_condition_ids = sort { $conditions->{$a}->display_order <=> $conditions->{$b}->display_order } keys %{$conditions};
    my $target_condition     = $conditions->{$params->{condition_id} || $sorted_condition_ids[0]};
    
    my @sorted_sample_ids    = sort { lc($conditions->{$target_condition->dbID}->samples->{$a}->name) cmp lc($conditions->{$target_condition->dbID}->samples->{$b}->name) } keys %{$conditions->{$target_condition->dbID}->samples};
    my $target_sample        = $samples->{$params->{sample_id} || $sorted_sample_ids[0]};
    
    my $fill_sample          = (defined $params->{fill_sample_id} and $params->{fill_sample_id} != $target_sample->dbID)
                                   ? $samples->{$params->{fill_sample_id}}
				   : undef;
    my $fill_condition       = defined $fill_sample
                                   ? $fill_sample->condition
				   : undef;
    
    my $entire_condition     = (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') ? 'yes'     : 'no';
    my $entire_checked       = (defined $params->{entire_condition} and $params->{entire_condition} eq 'yes') ? 'checked' : ''  ;

    my $sample_attrs         = $target_sample->attributes;
    my $fill_sample_attrs    = defined $fill_sample ? $fill_sample->attributes : undef;
    
    # data structure processing
    # merge and remove factors selected which are also attributes (order is important: factors first, then attributes)
    my $num_original_attrs = scalar(keys(%{$attributes}));
    %{$attributes} = (%{$factors}, %{$attributes}) if defined $factors;
    my $num_db_factors = scalar(keys(%{$attributes})) - $num_original_attrs;
    
    my $num_user_defined_factors = 0;
    if (defined $working_data                                and
        defined $working_data->{upload}                      and
        defined $working_data->{upload}->{$experiment->dbID} and
        defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
        for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
	    $num_user_defined_factors++ if $factor->{selected};
	}
    }
    
    my $num_total_factors = $num_db_factors + $num_user_defined_factors;
    
    my $grouped_attrs;

    my $attrs_struc;
    for my $attribute (sort { $a->dbID <=> $b->dbID } values %{$attributes}) {

        push @{$grouped_attrs->{$attribute->attr_group->dbID}}, $attribute;

        my $key = "attr_values_" . $attribute->dbID;
        $attrs_struc->{$key}{'name'} = $attribute->name;
        $attrs_struc->{$key}{'required'} = 1 if $attribute->required eq 'required';
        $attrs_struc->{$key}{'is_numeric'} = 1 if $attribute->is_numeric;
    }
    my $attrs_obj = toJSON($attrs_struc);

    undef $attributes;
    
    my ($temp_sample_attrs, $temp_fill_sample_attrs);
    for my $sample_attr (values %{$sample_attrs}) {
        if (defined $sample_attr->detail and $sample_attr->attribute->upload_form_type eq 'select-multiple') {
	    $temp_sample_attrs->{$sample_attr->attribute->dbID}->{$sample_attr->detail->dbID} = $sample_attr;
	} else {
	    $temp_sample_attrs->{$sample_attr->attribute->dbID} = $sample_attr;
	}
    }
    for my $fill_sample_attr (values %{$fill_sample_attrs}) {
        if (defined $fill_sample_attr->detail and $fill_sample_attr->attribute->upload_form_type eq 'select-multiple') {
	    $temp_fill_sample_attrs->{$fill_sample_attr->attribute->dbID}->{$fill_sample_attr->detail->dbID} = $fill_sample_attr;
	} else {
	    $temp_fill_sample_attrs->{$fill_sample_attr->attribute->dbID} = $fill_sample_attr;
	}
    }
    ($sample_attrs, $fill_sample_attrs) = ($temp_sample_attrs, $temp_fill_sample_attrs);
    undef $temp_sample_attrs;
    undef $temp_fill_sample_attrs;
    
    my ($any_cond_attrs_exist, $any_fill_cond_attrs_exist);
    for my $sample (values %{$target_condition->samples}) {
        if ($sample->attrs_exist) { $any_cond_attrs_exist++; last }
    }
    if (defined $fill_condition) {
        for my $fill_sample (values %{$fill_condition->samples}) {
	    if ($fill_sample->attrs_exist) { $any_fill_cond_attrs_exist++; last }
	}
    }
    
    # create JavaScript object
    my $sample_array = '[';
    for my $sample (sort { lc($a->name) cmp lc($b->name) } values %{$samples}) {
        my $name = escapeJS($sample->name);
        $sample_array .= " { \"sample_id\": @{[$sample->dbID]}, \"condition_id\": \"@{[$sample->condition->dbID]}\", \"name\": \"$name\" },";
    }
    chop $sample_array;
    $sample_array .= ' ]';

    # prepare HTML
    my ($conditions_html, $samples_html) = ('') x 2;
    
    my $selected          = defined $fill_sample ? 'selected' : '';
    my $autofill_cnd_html = "<option class='italic' $selected>-- no condition selected --</option>";
    my $autofill_smp_html = "<option class='italic' $selected>-- database/none --</option>";
    
    for my $condition_id (@sorted_condition_ids) {
        my $selected        = $condition_id == $target_condition->dbID ? 'selected' : '';
        my $cond_name_html  = $mimas_web->cgi->escapeHTML($conditions->{$condition_id}->name);
        $conditions_html   .= "<option value='$condition_id' $selected>$cond_name_html</option>";
        
        $selected           = (defined $fill_condition and $condition_id == $fill_condition->dbID) ? 'selected' : '';
        $autofill_cnd_html .= "<option value='$condition_id' $selected>$cond_name_html</option>";
    }
    
    for my $sample (sort { lc($a->name) cmp lc($b->name) } values %{$samples}) {
        my $selected   = $sample->dbID == $target_sample->dbID ? 'selected' : '';
        my $name_html  = $mimas_web->cgi->escapeHTML($sample->name);
        $samples_html .= "<option value='@{[$sample->dbID]}' $selected>$name_html</option>" if defined $target_condition->samples->{$sample->dbID};
        
        if ($sample->dbID != $target_sample->dbID) {
            if (defined $fill_sample) {
                $selected           = $sample->dbID == $fill_sample->dbID ? 'selected' : '';
                $autofill_smp_html .= "<option value='@{[$sample->dbID]}' $selected>$name_html</option>" if defined $fill_condition->samples->{$sample->dbID};
            } else {
                $autofill_smp_html .= "<option value='@{[$sample->dbID]}'>$name_html</option>";
            }
        }
    }
    
    my $cond_name_html   = $mimas_web->cgi->escapeHTML($target_condition->name);
    my $sample_name_html = $mimas_web->cgi->escapeHTML($target_sample->name);
    

    my $is_repository_import;
    for my $attr (values %{$experiment->attributes}) {
        if (lc $attr->attribute->name eq lc 'Microarray Facility') {
            if ($attr->detail->name =~ /^Imported from /i) {
                $is_repository_import = $attr->detail->name;
                $is_repository_import =~ s/^I/i/;
                last;
            }
        }
    }

    # MIAME and MIMAS Sample Attributes
    my $sample_attrs_html;
    ATTR_GROUP:
    for my $attr_group (sort { $a->upload_display_order <=> $b->upload_display_order } values %{$attr_groups}) {
        
        next unless defined $grouped_attrs->{$attr_group->dbID} or (lc($attr_group->name) eq 'experimental factor details' and $num_user_defined_factors > 0);
        
        my $group_name_html = $mimas_web->cgi->escapeHTML($attr_group->name);
        
        $sample_attrs_html .= <<"        HTML";
        <tr><td class="tablespacer01" colspan="2"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
	<tr>
          <td class="tableheader02">$group_name_html</td>
          <td class="tableheader02rt">[&nbsp;$cond_name_html&nbsp;&rarr;&nbsp;$sample_name_html&nbsp;]</td>
        </tr>
	<tr><td class="tablespacer01" colspan="2"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
        HTML
        
        my $section_empty = "";
        if ($is_repository_import and grep {lc $_ eq lc $attr_group->name} ('Hybridization Protocol', 'Image Analysis and Data Processing')) {
            $section_empty = "This section is empty for experiments $is_repository_import.\n";
        }
        elsif (!$target_sample->files and grep {lc $_ eq lc $attr_group->name} ('Hybridization Protocol', 'Image Analysis and Data Processing', 'Cross-references')) {
            $section_empty = "This section must be completed after samples files have been uploaded.\n";
        }

	if (defined $grouped_attrs->{$attr_group->dbID}) {
	    my ($age_single, $age_range);
            my $counter   = 1;
            my $num_attrs = lc($attr_group->name) ne 'experimental factor details'
	                      ? scalar @{$grouped_attrs->{$attr_group->dbID}}
			      : $num_total_factors;
            for my $attribute (sort by_order_then_name @{$grouped_attrs->{$attr_group->dbID}}) {
                my $tr_id            = ($attribute->is_attribute and lc($attribute->name) eq 'organism age'          ) ? 'tr_age'      :
	                               ($attribute->is_attribute and lc($attribute->name) eq 'min organism age'      ) ? 'tr_max_age'  :
				       ($attribute->is_attribute and lc($attribute->name) eq 'max organism age'      ) ? 'tr_min_age'  :
				       ($attribute->is_attribute and lc($attribute->name) eq 'age initial time point') ? 'tr_age_init' : '';
	        my $tr_class         = ($attribute->is_attribute and lc($attribute->name) eq 'organism age'          ) ? ($age_single                 ? '' : 'hidden') :
	                               ($attribute->is_attribute and lc($attribute->name) eq 'min organism age'      ) ? ($age_range                  ? '' : 'hidden') :
				       ($attribute->is_attribute and lc($attribute->name) eq 'max organism age'      ) ? ($age_range                  ? '' : 'hidden') :
				       ($attribute->is_attribute and lc($attribute->name) eq 'age initial time point') ? (($age_single or $age_range) ? '' : 'hidden') : '';
	        my $td_class01       = $counter != $num_attrs ? 'cell01w25pct' : 'cell03w25pct';
                my $td_class02       = $counter != $num_attrs ? 'cell02'       : 'cell04';
	        my $title_html       = $mimas_web->cgi->escapeHTML(defined $attribute->description ? $attribute->description : '');
	        my $attr_name_html   = $mimas_web->cgi->escapeHTML($attribute->name);
	        my $is_required_html = ($attribute->required eq 'required' or ($attribute->is_attribute and lc($attribute->name) =~ /^((min |max |)organism age|age initial time point)$/))
		                         ? "<img width='3' height='1' alt='' src='/images/spacer.gif'><span class='asterisk'>*</span>"
					 : '';
	        my $is_factor_html   = defined $factors->{$attribute->dbID}
		                         ? "<img width='3' height='1' alt='' src='/images/spacer.gif'><span class='specialcolor01'>[ F ]</span>"
					 : '';

                next if $section_empty and not $factors->{$attribute->dbID};
	        
	        $sample_attrs_html .= "<tr id='$tr_id' class='$tr_class'><td class='${td_class01}'><span class='attribute01' title='$title_html'>$attr_name_html</span>$is_required_html$is_factor_html</td>";
	        
	        # create input field for attribute if needs radio, select, or select-multiple element
	        if ($attribute->upload_form_type =~ /^(select|radio)/) {
	            # general case (attribute has values described in MIMAS Library)
	            if (defined $attribute->details) {
		        # flag needed if we have user-defined values for this attribute and if any of these are selected
		        my ($user_defined, $detail_selected);
		        if (defined $working_data                                                               and
                            defined $working_data->{upload}                                                     and
                            defined $working_data->{upload}->{$experiment->dbID}                                and
                            defined $working_data->{upload}->{$experiment->dbID}->{details}                     and
                            defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID} and
                            defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}) {
                            $user_defined++;
		            for my $value (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
                                if (defined $fill_sample) {
			            if (defined $value->{selected} and $value->{selected}->{$fill_sample->dbID}) {
				        $detail_selected++;
				        last;
				    }
			        } elsif (defined $value->{selected} and $value->{selected}->{$target_sample->dbID}) {
			            $detail_selected++;
				    last;
			        }
                            }
                        }
		        
	                if ($attribute->upload_form_type eq 'select-one') {
		            my $db_value_id      = (defined $sample_attrs                     and
			                            defined $sample_attrs->{$attribute->dbID} and
						    defined $sample_attrs->{$attribute->dbID}->detail)
		                                      ? $sample_attrs->{$attribute->dbID}->detail->dbID
				                      : undef;
		            
		            my $fill_db_value_id = (defined $fill_sample_attrs                     and
			                            defined $fill_sample_attrs->{$attribute->dbID} and
						    defined $fill_sample_attrs->{$attribute->dbID}->detail)
		                                      ? $fill_sample_attrs->{$attribute->dbID}->detail->dbID
					              : undef;
			    
			    # special flags needed for "Replicate Type" depending on number of replicates
			    # special flags for "Age Determination/Type" to control display for "Organism Age", "Min Organism Age" and "Max Organism Age"
		            my $force_no_repl = 0; #not for Sample attributes
		            my $skip_no_repl  = 0; #not for Sample attributes
			    $age_single       = ($attribute->is_attribute and lc($attribute->name) eq 'age determination/type')
			                          ? defined $fill_sample
						      ? (defined $fill_db_value_id and grep {lc($attribute->details->{$fill_db_value_id}->name) eq $_} SINGLE_AGES)
						          ? 1
							  : 0
						      : (defined $db_value_id and grep {lc($attribute->details->{$db_value_id}->name) eq $_} SINGLE_AGES)
							  ? 1
							  : 0
						  : 0;
			    $age_range        = ($attribute->is_attribute and lc($attribute->name) eq 'age determination/type')
			                          ? defined $fill_sample
						      ? (defined $fill_db_value_id and grep {lc($attribute->details->{$fill_db_value_id}->name) eq $_} RANGE_AGES)
						          ? 1
							  : 0
						      : (defined $db_value_id and grep {lc($attribute->details->{$db_value_id}->name) eq $_} RANGE_AGES)
							  ? 1
							  : 0
						  : 0;
                            
                            # custom JavaScript depending on attribute or whether the select element has an "other" option
		            my $onchange   =  ($attribute->is_attribute and lc($attribute->name) eq 'age determination/type') ? "onChange='checkagetype(this)'"   :
			                      $attribute->other                                                               ? "onChange='checkselectone(this)'" : '';
		            my $disabled   = ($force_no_repl)
			                        ? "class='disabled' disabled"
				                : '';
			    my $blank_html = $attribute->required eq 'required'
			                       ? "<option class='italic' value=''>Choose one...</option>"
					       : "<option class='italic' value=''>@{[MIMAS_NONE_NA_OPTION]}</option>";
                my $options_html = '';
                my $previous_other_html = '';
			    
			    for my $value (sort by_order_then_name values %{$attribute->details}) {
		                next if $skip_no_repl and lc($value->name) eq 'no replicates';
			        my $selected = $force_no_repl        ? (lc($value->name) eq 'no replicates'                               ? 'selected' : '') :
			                       defined $fill_sample  ? ((defined $fill_db_value_id and $value->dbID == $fill_db_value_id) ? 'selected' : '') :
		                               defined $sample_attrs ? ((defined $db_value_id      and $value->dbID == $db_value_id     ) ? 'selected' : '') :
					       !$detail_selected     ? ($value->default                                                   ? 'selected' : '') : '';
                                my $deprecated = $value->deprecated ? "[ DEPRECATED]" : "";
                                next if ($deprecated and !$selected);
			        my $value_html      = $mimas_web->cgi->escapeHTML($value->name . $deprecated);
			        $options_html .= "<option value='@{[$value->dbID]}' $selected>$value_html</option>";
				$detail_selected++ if $selected;
		            }
			    
			    if ($attribute->none_na) {
			        my $selected = defined $fill_sample
				                 ? ($attribute->required eq 'required' and !$detail_selected and
						   ($fill_sample->attrs_exist or (defined $factors->{$attribute->dbID} and $any_fill_cond_attrs_exist)))
						     ? 'selected'
						     : ''
						 : ($attribute->required eq 'required' and !$detail_selected and
						   ($target_sample->attrs_exist or (defined $factors->{$attribute->dbID} and $any_cond_attrs_exist)))
						     ? 'selected'
						     : '';
				$options_html .= "<option id='option_none_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}' $selected>@{[MIMAS_NONE_NA_OPTION]}</option>";
			    }
			    
			    $options_html .= "<option id='option_other_attr_values_@{[$attribute->dbID]}' class='itbld'>Other...</option>" if $attribute->other;
			    
		            if ($user_defined) {
			        $options_html .= "<optgroup id='optgroup_user_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
			        for my $value (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
			            my $selected = defined $fill_sample       ? ((defined $value->{selected} and $value->{selected}->{$fill_sample->dbID}) ? 'selected' : '') :
				                   defined $value->{selected} ? ($value->{selected}->{$target_sample->dbID}                                ? 'selected' : '') : '';
				    my $value_html      = $mimas_web->cgi->escapeHTML($value->{name});
                    $previous_other_html = $value_html if $value->{selected};
				    $options_html .= "<option value='$value_html' $selected>$value_html</option>";
			        }
			        $options_html .= "</optgroup>";
			    }
			    
			    $sample_attrs_html .= "<td class='${td_class02}'><select name='attr_values_@{[$attribute->dbID]}' $onchange $disabled _previous_other_value='$previous_other_html'>$blank_html$options_html";
			    $sample_attrs_html .= "</select></td>";
	                }
		        elsif ($attribute->upload_form_type eq 'select-multiple') {
	                    my ($pick_attr_values_html, $selected_attr_values_html) = ('') x 2;
                            my $seen_mage_name;
			    for my $value (sort by_detail_group_order_then_order_then_name values %{$attribute->details}) {
			        my $value_html = $mimas_web->cgi->escapeHTML($value->name);
                                my $mage_name = $value->mage_name || "";
                                my $mage_name_attr = $mage_name ? "_mimas_mage_name='$mage_name'" : "";
                                $seen_mage_name++ if $mage_name;
			        if (defined $fill_sample) {
			            if (defined $fill_sample_attrs                     and
				        defined $fill_sample_attrs->{$attribute->dbID} and
				        defined $fill_sample_attrs->{$attribute->dbID}->{$value->dbID}) {
				        $selected_attr_values_html .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
					$detail_selected++;
			            } else {
			                $pick_attr_values_html     .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
			            }
			        } elsif (defined $sample_attrs) {
			            if (defined $sample_attrs->{$attribute->dbID} and
				        defined $sample_attrs->{$attribute->dbID}->{$value->dbID}) {
				        $selected_attr_values_html .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
					$detail_selected++;
				    } else {
				        $pick_attr_values_html     .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
				    }
			        } elsif (!$detail_selected and $value->default) {
			            $selected_attr_values_html .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
				    $detail_selected++;
			        } else {
			            $pick_attr_values_html     .= "<option value='@{[$value->dbID]}' $mage_name_attr>$value_html</option>";
			        }
			    }
			    
			    if ($attribute->none_na) {
			        if (defined $fill_sample) {
				    if ($attribute->required eq 'required' and !$detail_selected and
				       ($fill_sample->attrs_exist or (defined $factors->{$attribute->dbID} and $any_fill_cond_attrs_exist))) {
				        $selected_attr_values_html .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
				    } else {
				        $pick_attr_values_html     .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
				    }
				} elsif ($attribute->required eq 'required' and !$detail_selected and
				        ($target_sample->attrs_exist or (defined $factors->{$attribute->dbID} and $any_cond_attrs_exist))) {
				    $selected_attr_values_html .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
				} else {
				    $pick_attr_values_html     .= "<option id='option_none_pick_attr_values_@{[$attribute->dbID]}' class='italic' value='@{[MIMAS_NONE_NA_OPTION]}'>@{[MIMAS_NONE_NA_OPTION]}</option>";
				}
			    }
			    
			    $pick_attr_values_html .= "<option id='option_other_pick_attr_values_@{[$attribute->dbID]}' class='itbld'>Other...</option>" if $attribute->other;
			    
			    if ($user_defined) {
			        my ($pick_optgroup_exists, $selected_optgroup_exists);
			        for my $value (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{values}}) {
			            my $value_html  = $mimas_web->cgi->escapeHTML($value->{name});
				    if (defined $fill_sample) {
				        if (defined $value->{selected} and $value->{selected}->{$fill_sample->dbID}) {
				            unless ($selected_optgroup_exists) {
				                $selected_attr_values_html .= "<optgroup id='optgroup_user_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					        $selected_optgroup_exists++;
				            }
				            $selected_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				        } else {
				            unless ($pick_optgroup_exists) {
				                $pick_attr_values_html .= "<optgroup id='optgroup_user_pick_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					        $pick_optgroup_exists++;
				            }
				            $pick_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				        }
				    } elsif (defined $value->{selected} and $value->{selected}->{$target_sample->dbID}) {
				        unless ($selected_optgroup_exists) {
				            $selected_attr_values_html .= "<optgroup id='optgroup_user_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					    $selected_optgroup_exists++;
				        }
				        $selected_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				    } else {
				        unless ($pick_optgroup_exists) {
				            $pick_attr_values_html .= "<optgroup id='optgroup_user_pick_attr_values_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
					    $pick_optgroup_exists++;
				        }
				        $pick_attr_values_html .= "<option value='$value_html'>$value_html</option>";
				    }
			        }
			        $pick_attr_values_html     .= "</optgroup>" if $pick_optgroup_exists;
			        $selected_attr_values_html .= "</optgroup>" if $selected_optgroup_exists;
			    }
			    
                            my $textarea = $seen_mage_name ? qq(<div class='attrdescription'><textarea id='attrdescription_@{[$attribute->dbID]}' rows='2' readonly></textarea></div>) : "";

			    $sample_attrs_html .= <<"                            HTML";
			    <td class="${td_class02}nopad">
			      <table width="100%" cellpadding="0" cellspacing="0" border="0">
                                <tr>
                                  <td class="cell03w50pct" rowspan="2"><select multiple class="w100pct" name="pick_attr_values_@{[$attribute->dbID]}" size="6" ondblclick="checkselectmulti(this.form, 'pick_attr_values_@{[$attribute->dbID]}', 'attr_values_@{[$attribute->dbID]}')" onchange="setAttrDescription('attrdescription_@{[$attribute->dbID]}', this)">$pick_attr_values_html</select></td>
                                  <td class="cell01ctrwmin"><input class="button01w60" type="button" value="ADD &rarr;" onClick="checkselectmulti(this.form, 'pick_attr_values_@{[$attribute->dbID]}', 'attr_values_@{[$attribute->dbID]}')"></td>
                                  <td class="cell04w50pct" rowspan="2"><select multiple class="w100pct" name="attr_values_@{[$attribute->dbID]}" size="6" ondblclick="checkselectmulti(this.form, 'attr_values_@{[$attribute->dbID]}', 'pick_attr_values_@{[$attribute->dbID]}')">$selected_attr_values_html</select></td>
                                </tr>
                                <tr>
                                  <td class="cell03ctrwmin"><input class="button01w60" type="button" value="&larr; REMOVE" onClick="checkselectmulti(this.form, 'attr_values_@{[$attribute->dbID]}', 'pick_attr_values_@{[$attribute->dbID]}')"></td>
                                </tr>
                              </table>
                          $textarea
		            </td>
                            HTML
	                }
		        elsif ($attribute->upload_form_type eq 'radio') {
		            my $db_value_id      = (defined $sample_attrs                     and
			                            defined $sample_attrs->{$attribute->dbID} and
						    defined $sample_attrs->{$attribute->dbID}->detail)
		                                      ? $sample_attrs->{$attribute->dbID}->detail->dbID
				                      : undef;
		            
		            my $fill_db_value_id = (defined $fill_sample_attrs                     and
			                            defined $fill_sample_attrs->{$attribute->dbID} and
						    defined $fill_sample_attrs->{$attribute->dbID}->detail)
		                                      ? $fill_sample_attrs->{$attribute->dbID}->detail->dbID
					              : undef;
			    
			    my $id = 1;
			    $sample_attrs_html .= "<td class='${td_class02}'>";
			    for my $value (sort by_order_then_name values %{$attribute->details}) {
			        my $checked = defined $fill_sample  ? ((defined $fill_db_value_id and $value->dbID == $fill_db_value_id) ? 'checked' : '') :
		                              defined $sample_attrs ? ((defined $db_value_id      and $value->dbID == $db_value_id     ) ? 'checked' : '') :
			                      $value->default       ? 'checked'                                                                            : '';
			        my $value_html      = $mimas_web->cgi->escapeHTML($value->name);
			        $sample_attrs_html .= "<input type='radio' id='radio_${id}_@{[$attribute->dbID]}' name='attr_values_@{[$attribute->dbID]}' value='@{[$value->dbID]}' $checked><label for='radio_${id}_@{[$attribute->dbID]}'>$value_html</label>";
			        $id++;
			    }
			    $sample_attrs_html .= "</td>";
		        }
		        else {
	                    $sample_attrs_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	                }
	            }
	            else {
	                $sample_attrs_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	            }
	        }
	        # create input field for attribute if needs text or textarea element
	        elsif ($attribute->upload_form_type =~ /^text/) {
	            my $value = defined $fill_sample
	                          ? (defined $fill_sample_attrs and defined $fill_sample_attrs->{$attribute->dbID})
			               ? (defined $fill_sample_attrs->{$attribute->dbID}->char_value    ? $fill_sample_attrs->{$attribute->dbID}->char_value    :
	                                  defined $fill_sample_attrs->{$attribute->dbID}->numeric_value ? $fill_sample_attrs->{$attribute->dbID}->numeric_value : '')
				       : ''
	                          : (defined $sample_attrs and defined $sample_attrs->{$attribute->dbID})
			               ? (defined $sample_attrs->{$attribute->dbID}->char_value         ? $sample_attrs->{$attribute->dbID}->char_value         :
				          defined $sample_attrs->{$attribute->dbID}->numeric_value      ? $sample_attrs->{$attribute->dbID}->numeric_value      : '')
				       : '';
		    
		    my $class;
	            my $readonly = '';
	            
	            unless ($value) {
		        # special case for "Data Processing/Normalization" since we can put Affymetrix algorithm description for TXT metrics file
	                if ($attribute->is_attribute and lc($attribute->name) eq 'data processing/normalization') {
		            $value = "Affymetrix GCOS/MAS algorithm used to generate probeset-level intensities in TXT metrics file.\n" .
                                     "GeneSpring RMA preprocessor and algorithm used to generate probeset-level intensities in RMA file.\n" .
				     "GeneSpring GC-RMA preprocessor and algorithm to generate probeset-level intensities in GMA file.";
		        }
	            }
	            
	            my $value_html = $mimas_web->cgi->escapeHTML($value);
	            
	            if ($attribute->upload_form_type eq 'text') {
		        $class = $attribute->is_numeric ? 'numeric01' : (defined $attribute->details ? '' : 'w100pct') unless $class;
	                
		        $sample_attrs_html .= "<td class='${td_class02}'><input class='$class' type='text' name='attr_values_@{[$attribute->dbID]}' value='$value_html' $readonly>";
		        
		        ## create units select element for attribute if needed
		        ## (right now only text input elements would ever need units)
		        if (defined $attribute->details) {
		            # flag needed if we have user-defined units for this attribute and if any of these are selected
			    my ($user_defined, $detail_selected);
			    if (defined $working_data                                                               and
			        defined $working_data->{upload}                                                     and
			        defined $working_data->{upload}->{$experiment->dbID}                                and
			        defined $working_data->{upload}->{$experiment->dbID}->{details}                     and
			        defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID} and
			        defined $working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}) {
                                $user_defined++;
			        for my $unit (values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
			            if (defined $fill_sample) {
			                if (defined $unit->{selected} and $unit->{selected}->{$fill_sample->dbID}) {
				            $detail_selected++;
				            last;
				        }
			            } elsif (defined $unit->{selected} and $unit->{selected}->{$target_sample->dbID}) {
			                $detail_selected++;
				        last;
			            }
			        }
			    }
			    
			    my $db_unit_id      = (defined $sample_attrs                     and
			                           defined $sample_attrs->{$attribute->dbID} and
					           defined $sample_attrs->{$attribute->dbID}->detail)
		                                     ? $sample_attrs->{$attribute->dbID}->detail->dbID
					             : undef;
                            
		            my $fill_db_unit_id = (defined $fill_sample_attrs                     and
			                           defined $fill_sample_attrs->{$attribute->dbID} and
					           defined $fill_sample_attrs->{$attribute->dbID}->detail)
		                                     ? $fill_sample_attrs->{$attribute->dbID}->detail->dbID
					             : undef;
		            
		            $sample_attrs_html .= "<select name='attr_units_@{[$attribute->dbID]}' onChange='checkselectone(this)'>";
		            for my $unit (sort by_order_then_name values %{$attribute->details}) {
	                        my $selected = defined $fill_sample ? (defined $fill_db_unit_id   ? ($unit->dbID == $fill_db_unit_id ? 'selected' : '') : 
				                                       !$detail_selected          ? ($unit->default                  ? 'selected' : '') : '') :
				               defined $db_unit_id  ? ($unit->dbID == $db_unit_id ? 'selected'                                          : '') :
					       !$detail_selected    ? ($unit->default             ? 'selected'                                          : '') : '';
				my $unit_html       = $mimas_web->cgi->escapeHTML($unit->name);
			        $sample_attrs_html .= "<option value='@{[$unit->dbID]}' $selected>$unit_html</option>";
				$detail_selected++ if $selected;
	                    }
		            
		            # users not allowed to create new units anymore
		            # $sample_attrs_html .= "<option id='option_other_attr_units_@{[$attribute->dbID]}' class='itbld'>Other...</option></select>";
			    
			    if ($user_defined) {
			        $sample_attrs_html .= "<optgroup id='optgroup_user_attr_units_@{[$attribute->dbID]}' class='itbld' label='User-defined:'>";
			        for my $unit (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{details}->{$attribute->dbID}->{units}}) {
			            my $selected = defined $fill_sample      ? ((defined $unit->{selected} and $unit->{selected}->{$fill_sample->dbID}) ? 'selected' : '') :
				                   defined $unit->{selected} ? ($unit->{selected}->{$target_sample->dbID}                               ? 'selected' : '') : '';
				    my $unit_html       = $mimas_web->cgi->escapeHTML($unit->{name});
				    $sample_attrs_html .= "<option value='$unit_html' $selected>$unit_html</option>";
			        }
			        $sample_attrs_html .= "</optgroup>";
			    }
			    
		            $sample_attrs_html .= "</select>";
		        }
		        
		        $sample_attrs_html .= "</td>";
	            } 
	            elsif ($attribute->upload_form_type eq 'textarea') {
	                $sample_attrs_html .= "<td class='${td_class02}'><textarea class='w100pct' rows='4' wrap='soft' name='attr_values_@{[$attribute->dbID]}' $readonly>$value_html</textarea></td>";
	            }
		    else {
		        $sample_attrs_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
		    }
	        }
	        else {
	            $sample_attrs_html .= "<td class='${td_class02}'><img width='1' height='1' alt='' src='/images/spacer.gif'></td>";
	        }
	        
	        $sample_attrs_html .= "</tr>\n";
	        $counter++;
            }
	}
	
	# User-defined Experimental Factor Details
        if (lc($attr_group->name) eq 'experimental factor details' and $num_user_defined_factors > 0) {
            my $counter = 1;
	    for my $factor (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
	        if ($factor->{selected}) {
	            my $td_class01       = $counter != $num_user_defined_factors ? 'cell01w25pct' : 'cell03w25pct';
                    my $td_class02       = $counter != $num_user_defined_factors ? 'cell02'       : 'cell04';
	            my $factor_name_html = $mimas_web->cgi->escapeHTML($factor->{name});
	            my $is_factor_html   = "<img width='3' height='1' alt='' src='/images/spacer.gif'><span class='specialcolor01'>[ F ]</span>";
	            
	            $sample_attrs_html .= "<tr><td class='${td_class01}'><span class='attribute01'>$factor_name_html</span>$is_factor_html</td>";
	            
	            my $value = defined $fill_condition
	                          ? (defined $factor->{values} and defined $factor->{values}->{$fill_condition->dbID})
				      ? $factor->{values}->{$fill_condition->dbID}
				      : ''
			          : (defined $factor->{values} and defined $factor->{values}->{$target_condition->dbID})
				      ? $factor->{values}->{$target_condition->dbID}
				      : '';
	            
	            my $value_html = $mimas_web->cgi->escapeHTML($value);
	            my $class      = $factor->{is_numeric} ? 'numeric01' : 'w100pct';
	            
		    $sample_attrs_html .= "<td class='${td_class02}'><input class='$class' type='text' name='other_factor_values_$factor->{ID}' value='$value_html'>";
	            
	            if ($factor->{is_numeric} and defined $factor->{units}) {
	                my $detail_selected;
		        for my $unit (values %{$factor->{units}}) {
		            if (defined $fill_condition) {
                                if (defined $unit->{selected} and $unit->{selected}->{$fill_condition->dbID}) {
				    $detail_selected++;
				    last;
				}
			    } elsif (defined $unit->{selected} and $unit->{selected}->{$target_condition->dbID}) {
			        $detail_selected++;
				last;
			    }
		        }
		        
		        $sample_attrs_html .= "<select name='other_factor_units_$factor->{ID}'>";
		        for my $unit (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$factor->{units}}) {
		            my $selected = defined $fill_condition
			                     ? (defined $unit->{selected} and $unit->{selected}->{$fill_condition->dbID})
					         ? 'selected'
						 : (!$detail_selected and $unit->{default})
						     ? 'selected'
						     : ''
					     : (defined $unit->{selected} and $unit->{selected}->{$target_condition->dbID})
					         ? 'selected'
						 : (!$detail_selected and $unit->{default})
						     ? 'selected'
						     : '';
			    my $unit_html       = $mimas_web->cgi->escapeHTML($unit->{name});
		            $sample_attrs_html .= "<option value='$unit->{ID}' $selected>$unit_html</option>";
		        }
		        $sample_attrs_html .= "</select>";
	            }
		    
		    $sample_attrs_html .= "</td></tr>\n";
		    $counter++;
	        }
            }
        }

        if ($section_empty) {
            $sample_attrs_html .= "<tr><td class=\"td_class04nopad\" colspan=\"2\">$section_empty</td></tr>\n";
        }
    }

    my $entire_display       = keys(%{$target_sample->condition->samples}) > 1 ? "block" : "none";

    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="$web_page">
    <input type="hidden" name="condition_id" value="@{[$target_condition->dbID]}">
    <input type="hidden" name="sample_id" value="@{[$target_sample->dbID]}">
    HTML
    
    $body = <<"    HTML";
    <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <table class="submain01" cellpadding="0" cellspacing="0" border="0">
          <tr>
            <td class="colheader01ctrw50pct">Navigate</td>
	    <td class="colheader02ctrw50pct">Autofill Meta-Data</td>
          </tr>
	  <tr><td class="tablespacer01" colspan="2"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
          <tr>
            <td>
	      <table width="100%" cellpadding="0" cellspacing="0" border="0">
	        <tr>
                  <td class="cell01w125"><span class="nowrap">Experimental Condition:</span></td>
	          <td class="cell01"><select onChange="location.replace(baseurl + '&condition_id=' + this.value)">$conditions_html</select></td>
	        </tr>
	        <tr>
                  <td class="cell03w125">Sample:</td>
	          <td class="cell03"><select onChange="location.replace(baseurl + '&condition_id=' + @{[$target_condition->dbID]} + '&sample_id=' + this.value)">$samples_html</select></td>
	        </tr>
	      </table>
	    </td>
	    <td>
	      <table width="100%" cellpadding="0" cellspacing="0" border="0">
	        <tr>
	          <td class="cell01w125"><span class="nowrap">Experimental Condition:</span></td>
	          <td class="cell02"><select onChange="checkfillcondition(this, samplearray, @{[$target_sample->dbID]})">$autofill_cnd_html</select></td>
                </tr>
	        <tr>
	          <td class="cell03w125">Fill From Sample:</td>
	          <td class="cell04"><select id="fill_sample_select" onChange="checkfillsample(this, fullurl)">$autofill_smp_html</select></td>
                </tr>
	      </table>
	    </td>
          </tr>
        </table>
      </td>
    </tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <form name="sample_attrs" method="post" action="$base/upload" onSubmit="return checkattrs(this, attrsobj)" onReset="if (confirm('Reset entire page and start over?')) location.replace(fullurl); else return false">
          <table class="submain01" cellpadding="0" cellspacing="0" border="0">
            <tr><td class="tableheader01">Sample Attributes</td></tr>
	    <tr>
	      <td>
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
	          $sample_attrs_html
	        </table>
	      </td>
	    </tr>
	    <tr>
	      <td>
	        <table width="100%" cellpadding="0" cellspacing="0" border="0">
		  <tr>
		    <td class="submitopts01">
		      <table width="100%" cellpadding="0" cellspacing="0" border="0" style="display:$entire_display">
		        <tr>
			  <td class="checkbox01"><input type="checkbox" id="entire_condition" name="entire_condition" value="yes" $entire_checked></td>
			  <td class="label01">
			    <label for="entire_condition">Submit meta-data for all samples in experimental condition</label><br>
			    (experimental factor details <span class="specialcolor01">[ F ]</span> are always submitted for all samples in experimental condition)
			  </td>
			</tr>
		      </table>
		    </td>
		    <td>
		      <table width="100%" cellpadding="0" cellspacing="0" border="0">
		        <tr><td class="submit"><input class="submitw115" type="submit" value="SUBMIT"></td></tr>
			<tr><td class="reset"><input class="resetw115" type="reset" value="Reset"></td></tr>
		      </table>
		    </td>
		  </tr>
		</table>
	      </td>
	    </tr>
          </table>
          $hidden_html
        </form>
      </td>
    </tr>
    HTML
    
    $jscript = <<"    JSCRIPT";
    var attrsobj    = $attrs_obj;
    var samplearray = $sample_array;
    var baseurl     = "$base/upload?page=${web_page}&session_id=${session_id}&entire_condition=${entire_condition}";
    var fullurl     = "$base/upload?page=${web_page}&session_id=${session_id}&entire_condition=${entire_condition}&condition_id=@{[$target_condition->dbID]}&sample_id=@{[$target_sample->dbID]}";
    JSCRIPT
    
    $title         = 'Sample Attributes (MIAME) & Experimental Factor Details';
    $cache_control = '';
    $onunload      = '';
    
}
elsif ($web_page eq 'upload_summary') {
    my $working_data = $edited_user->working_data;
    my $user_defined_factors;
    if (defined $working_data                                and
        defined $working_data->{upload}                      and
        defined $working_data->{upload}->{$experiment->dbID} and
        defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
        $user_defined_factors++;
    }
    
    # user shouldn't get here without appropriate progress number and important data
    push @errors, 'No samples uploaded! Please complete file upload page.'                         unless defined $experiment->samples;
    push @errors, 'No experimental conditions defined! Please complete sample relationships page.' unless defined $experiment->conditions;
    push @errors, 'No experiment information!  Please complete the experiment information page.'   unless defined $experiment->attributes and (defined $experiment->factors or $user_defined_factors);
    push @errors, 'Previous pages are not properly completed!  Please go back.'                    unless $experiment->progress >= $progress;
    for my $sample (sort { lc($a->name) cmp lc($b->name) } values %{$experiment->samples} ) {
        if (!defined $sample->attributes) {
	    push @errors, "Sample attributes missing for sample '@{[$sample->name]}'! Please go back and complete the sample attributes pages.";
	}
    }
    $mimas_web->error(@errors) if @errors;
    
    # prepare HTML
    my ($exp_conditions_html, $exp_factors_html) = ('') x 2;
    for my $exp_condition (sort { $a->display_order <=> $b->display_order } values %{$experiment->conditions}) {
        my $cond_name_html    = $mimas_web->cgi->escapeHTML($exp_condition->name);
        $exp_conditions_html .= "$cond_name_html<br>";
    }
    
    for my $exp_factor (sort { lc($a->attribute->name) cmp lc($b->attribute->name) || lc($a->detail->name) cmp lc($b->detail->name) } values %{$experiment->attributes}) {
        if ($exp_factor->attribute->is_attribute and lc($exp_factor->attribute->name) eq 'experimental factors') {
	    my $factor_name_html = $mimas_web->cgi->escapeHTML($exp_factor->detail->name);
            $exp_factors_html   .= "$factor_name_html<br>";
        }
    }
    
    if (defined $working_data                                and
        defined $working_data->{upload}                      and
        defined $working_data->{upload}->{$experiment->dbID}) {
    }
    else {
    }

    if (defined $working_data                                and
        defined $working_data->{upload}                      and
        defined $working_data->{upload}->{$experiment->dbID} and
        defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
        for my $factor (values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
	    if ($factor->{selected}) {
	        my $factor_name_html = $mimas_web->cgi->escapeHTML($factor->{name});
		$exp_factors_html   .= "$factor_name_html <span style='color:red'>(new factor)</span>";
                if ($curation_mode and !$factor->{is_numeric}) {
                    $exp_factors_html .= "&nbsp;<select name='form_type_@{[$factor->{ID}]}'><option value=''>Select an upload form type for this factor [mandatory]...</option>\n";
                    for my $form_type_id (sort numerically keys %{+MIMAS_FORM_TYPES}) {
                        $exp_factors_html .= "<option value='$form_type_id'>@{[MIMAS_FORM_TYPES->{$form_type_id}->{upload}]}</option>\n";
                    }
                    $exp_factors_html .= "</select>";
                }
		$exp_factors_html   .= "<br>";
	    }
	}
    }
    
    my $confirm_message2 = 'Are you sure you wish to reject the experiment?\nThe user does NOT receive a notification e-mail. Please make sure to contact the user if necessary.';
    

    my %exp_arrays = map {$_->array->dbID, $_->array} map {values %$_} $experiment->samples;
    my $exp_arrays_html = $mimas_web->cgi->escapeHTML(
	    join ", ", map {$_->display_name} values %exp_arrays
	    );

    my $confirm_message = $curation_mode ?
        'Are you sure you have double-checked the upload and want to mark it as approved?':
        'Are you sure you have double-checked your upload and are ready to submit to curation?';

    my $missing_required_files;
	SAMPLE: for my $sample (values %{$experiment->samples}) {
		my $files = $sample->files;
		for my $ext (sort keys %{+MIMAS_UPLOAD_REQ_FILE_EXTS}) {
			for my $file (values %$files) {
				next SAMPLE if $file->format eq $ext;
			}
		}
		$missing_required_files = 1;
	}
    my $missing_required_files_html = !$missing_required_files ? "" : <<"    HTML";
          <tr>
              <td class="submit"><div class="warning">Required sample files are missing. Please go to the File Upload page and submit the missing files.<br/>If the required files are not available, you may however submit the experiment.</div></td>
	  </tr>
    HTML

    my $hidden_html = <<"    HTML";
    <input type="hidden" name="session_id" value="$session_id">
    <input type="hidden" name="page" value="upload_completed">
    HTML

    my $reject_experiment_html = !$curation_mode ? "" : <<"    HTML";
          <tr>
              <td class="submit">
	      $hidden_html
<img src="/images/rubberstamp_large.jpg" height="150px"><br><input class="submitw170 buttoncurate" type="submit" name="approve_upload" value="APPROVE UPLOAD"></td>
          </tr>
	    </form>
          <tr>
              <td class="submit">
            <form name="curation_submission3" method="post" action="$base/upload" onSubmit="return confirm('$confirm_message2')">
<input class="submitw170 buttoncurate" type="submit" name="reject_curation" value="REJECT EXPERIMENT"></td>
	      $hidden_html
	    </form>
          </tr>
    HTML

    my $disabled = $curation_mode ? "disabled" : "";

    my $needs_curation = needs_curation($edited_user, $experiment);
    my $send_to_html = $needs_curation ? "SEND TO MIMAS CURATION" : "SEND TO REPOSITORY";
    
    $body = <<"    HTML";
    <tr><td class="header01wrap">EXPERIMENT: @{[$mimas_web->cgi->escapeHTML($experiment->name)]}</td></tr>
    <tr><td><img width="1" height="20" alt="" src="/images/spacer.gif"></td></tr>
    <tr>
      <td>
        <table class="submain01" cellpadding="0" cellspacing="0" border="0">
          <tr><td class="tableheader01">Upload Summary</td></tr>
	  <tr><td class="tablespacer01"><img width="1" height="5" alt="" src="/images/spacer.gif"></td></tr>
            <form name="curation_submission2" method="post" action="$base/upload" onSubmit="return checkfieldtype(this) && confirm('$confirm_message')">
          <tr>
            <td>
	      <table width="100%" cellpadding="0" cellspacing="0" border="0">
	        <tr>
	          <td class="cell01w40pct">Samples Uploaded</td>
	          <td class="cell02">@{[$experiment->num_hybrids]}</td>
	        </tr>
	        <tr>
	          <td class="cell01w40pct">Microarrays</td>
	          <td class="cell02">$exp_arrays_html</td>
	        </tr>
	        <tr>
	          <td class="cell01w40pct">Experimental Conditions</td>
	          <td class="cell02">$exp_conditions_html</td>
	        </tr>
	        <tr>
	          <td class="cell03w40pct">Experimental Factors</td>
	          <td class="cell04">$exp_factors_html</td>
	        </tr>
	      </table>
	    </td>
          </tr>
		  $missing_required_files_html
          $reject_experiment_html
          <tr>
              <td class="submit">
            <form name="curation_submission3" method="post" action="$base/upload" onSubmit="return confirm('$confirm_message')">
<input class="submitw170" type="submit" name="submit_curation" $disabled value="$send_to_html">
	      $hidden_html
	    </form>
              </td>
          </tr>
        </table>
      </td>
    </tr>
    HTML
    
    $jscript = <<"    JSCRIPT";
    JSCRIPT
    
    $title         = 'Upload Summary';
    $cache_control = 'no-store';
    $onunload      = '';
    
}
elsif ($web_page eq 'upload_completed') {
    my $curation_log_html = $mimas_web->cgi->escapeHTML($curation_log);
    $body = <<"    HTML";
    <tr>
      <td>
      <pre>
        $curation_log_html
      </pre>
      </td>
    </tr>
    <tr>
      <td style='color:red'>
        Upload successful
      </td>
    </tr>
    HTML
    
    $jscript = <<"    JSCRIPT";
    JSCRIPT
    
    $title         = 'Upload Summary';
    $cache_control = 'no-store';
    $onunload      = '';

    $detail_menu = '';
    
}


#
## session processing
#
$mimas_web->session->{timestamp}          = time;
$mimas_web->session->{upload}->{progress} = $experiment->progress unless $web_page eq 'manage_uploads' or $web_page eq 'export_data';


#
## display HTML
#
print $mimas_web->cgi->header(-type          => 'text/html',
                              -charset       => 'utf-8',
			      -encoding      => 'utf-8',
			      -cache_control => $cache_control),
      
      $mimas_web->cgi->start_html(-title     => "MIMAS Repository Uploads -- $title",
                                  -encoding  => 'utf-8',
                                  -style     => {-src => ["/styles/mimas_01.css?session_id=$session_id", @css]},
		                  -script    => [ {-src => "/js/mimas.js?session_id=$session_id"}, {-src => "/perl/mged_ontology?session_id=$session_id"}, {-code => $jscript} ],
		                  -onUnload  => $onunload),
      
      $mimas_web->html->web_page(-template    => 'TEMPLATE_01',
                                 -main_menu   => 'DEFAULT',
		                 -detail_menu => $detail_menu,
		                 -navbar      => 'LOGOUT',
		                 -body        => $body,
		                 -user        => $auth_user,
						 ),
      
      $mimas_web->cgi->end_html;


#
## store session
#
$mimas_db->Web->SessionAdaptor->store($mimas_web->session);

}

sub expand_archives {
    my ($errors, $filespecs, $fhs) = @_;
    my @result;
    for my $arch_fh (@$fhs) {
	    my $arch_filespec = shift @$filespecs;
	    unless ($arch_filespec) {
	        push @$errors, "File upload didn't work properly";
	    }
	    $arch_filespec =~ s/^\s+//;
            $arch_filespec =~ s/\s+$//;

	    bless $arch_fh, "IO::File"; #necessary for Archive::Zip

	    unless ($arch_filespec =~ /\.(TAR|GZ|TAR\.GZ|TGZ|ZIP)$/i) {
		push @result, [$arch_filespec, $arch_fh];
		next;
	    }
            my $arch_ext   = uc $1;
	    
	    push @$errors, "Archive file does not exist: $arch_filespec" unless -s $arch_fh;
	    
	    # extract archive if no global errors
	    next if @$errors;

	        my $WORKING_DIR = newTempDir;
	        chdir $WORKING_DIR;
		
		# necessary for non-Unix systems; does nothing in Unix but makes sure Perl keeps its hands off the data
	        binmode $arch_fh;
	        
		# extract archive
		my @filespecs;
		if ($arch_ext eq 'ZIP') {
	            # Archive::Zip accepts only "seekable" filehandles for readFromFileHandle() which is fine
                    # but it has an awful and broken way of checking whether a filehandle is seekable so it thinks
                    # that a filehandle opened using open() or sysopen() is NOT seekable (what?!?!?) and 
                    # needs the filehandle to be an IO::File object to be seekable -- so I alias my existing 
                    # filehandle for the uploaded file that I get from CGI.pm (CGI.pm uses sysopen())
                        binmode $arch_fh;
                        my $zip = Archive::Zip->new();
                        if ($zip->readFromFileHandle($arch_fh) == AZ_OK) {
                            for my $member ($zip->members) {
			        push @filespecs, $member->fileName unless $member->isDirectory;
			    }
		            $zip->extractTree() == AZ_OK or push @$errors, "Error extracting ZIP compressed archive";
		        } else {
		            push @$errors, "Error reading from ZIP compressed archive";
		        }
	        }
	        elsif ($arch_ext =~ /^(TAR|TAR\.GZ|TGZ)$/) {
                    my $is_gz = $arch_ext =~ /GZ$/i;
		    # Archive::Tar, if given a file that is garbage or not a real tar gzipped file, will unfortunately keep 
		    # trying to read the archive and print to STDOUT "Couldn't read chunk at offset..." -- this sucks and there seems to be no way around it!!
	            if (!$is_gz) {
                        @filespecs = Archive::Tar->extract_archive($arch_fh, 0) or push @$errors, "Error extracting TAR compressed archive: $Archive::Tar::error";
                    }
		    elsif (my $gzip = IO::Zlib->new($arch_fh, 'rb')) {
                        @filespecs = Archive::Tar->extract_archive($gzip, 0) or push @$errors, "Error extracting TARGZ/TGZ compressed archive: $Archive::Tar::error";
		    } else {
		        push @$errors, "Error opening TARGZ/TGZ compressed archive";
		    }
	        }
	        elsif ($arch_filespec =~ /([^\/]+)\.GZ$/i) {
				my $destfile = $1;
				my $gzip = IO::Zlib->new($arch_fh, 'rb') or push @$errors, "Error extracting GZ compressed file";
				my $destfile_h = new IO::File $destfile, "w" or die $!;
				{
					local $/ = \32767;
					print $destfile_h $_ while <$gzip>;
				}
				close $destfile_h or die $!;
				@filespecs = $destfile;
				close $gzip or push @$errors, "Error extracting GZ compressed file";
			}
		
		# open filehandles if no extraction errors
		unless (@$errors) {
		    for my $i (0 .. $#filespecs) {
                        my $filename = $filespecs[$i];
                        my $filepath = "$WORKING_DIR/$filename";
                        my $fh;
                        #GEO downloads are TAR files containing CEL.GZ files -- so we have to gunzip files
                        #within expanded archives!
                        if ($filename =~ s/\.GZ$//i) {
                            #IO::Zlib does not support the seek method, so we can't just pass the handle to the parser
                            #but have to fully decompress the file.
                            my $fh_z = IO::Zlib->new($filepath, 'rb') or push @$errors, "Error opening file '$filename'";
                            if ($fh_z) {
                                my $filepath2 = "$WORKING_DIR/$filename";
                                $fh = new IO::File($filepath2, "w+", 0600) or die "Cannot create $filepath: $!";
                                local $/ = \MIMAS_FILE_BUFFER_SIZE;
                                while (my $buff = <$fh_z>) {
                                    print $fh $buff;
                                }
                                seek $fh, 0, 0;
                                close $fh_z or die "Error $! with $filepath through IO::Zlib";
                            }
                        }
                        else {
                            #uses sysopen
                            $fh = new IO::File($filepath, O_RDONLY, 0600) or push @$errors, "Error opening file '$filename'";
                        }
                        push @result, [$filename, $fh];
		    }
		}
	    }
    return @result;
}

sub store_file {
	my ($mimas_db, $experiment, $basename, $ext, $file_name, $fh, $selected_array_id, $force_probesets, $overwrite_files) = @_;
	my $parser = new MIMAS::SampleFileParser(-format => $ext);
	my $cursor;

	eval {
		$cursor = $parser->parse($fh, $basename, undef);
	};
	return $@ if $@;

	my $format = $cursor->format;
	my $hybridization_names = $cursor->hybridization_names;
	return "Could not identify sample names from uploaded file" unless @$hybridization_names; 

	my $is_germonline = 0;
	my @errors;

	#If file in given format already exists for given sample, throw error or delete existing file
	for my $hybridization_name (@$hybridization_names) {
		my $sample_to_file = $mimas_db->Upload->SampleToFileAdaptor->select_by_expID_name_format($experiment->dbID, $hybridization_name, $format) || undef;
		if (defined $sample_to_file) {
			if ($overwrite_files) {
				my $other = $sample_to_file->sample_file->sample_to_files;
				if (keys(%$other) == 1) {
					$is_germonline = $sample_to_file->is_germonline;
					$mimas_db->Upload->SampleFileAdaptor->remove_by_dbID($sample_to_file->sample_file->dbID);
				}
				else {
					push @errors, "Cannot overwrite $file_name as file is linked to multiple samples";
					return @errors;
				}

			}
			else {
				push @errors, "Ignored file as $format format data already loaded for sample $hybridization_name"; 
				return @errors;
			}
		}
	}


	return @errors if @errors;
	push @errors, eval {

		#Store file
                my $hybridization_date_formatted;
                if (defined $cursor->hybridization_date) {
                    $hybridization_date_formatted = $mimas_db->Engine->format_date($cursor->hybridization_date);
                }

		my $raw_file_data;
		{
			local $/ = undef; #slurp file
                        # necessary for non-Unix systems; does nothing in Unix but makes sure Perl keeps its hands off the data
			binmode $fh;
			$fh->seek(0, 0);
			$raw_file_data = <$fh>;
		}

		my $fingerprint = generate_fingerprint($raw_file_data);

		my $ex_file = $mimas_db->Upload->SampleFileAdaptor->select_by_expID_fingerprint($experiment->dbID, $fingerprint);
		return "Identical file already exists. Existing file: ". $ex_file->file_name . ", rejected uploaded file: " . $file_name if $ex_file;

		my $sample_file_id =
		$mimas_db->Upload->SampleFileAdaptor->store(
				-format => $format,
				-experiment_id => $experiment->dbID,
				-contents  => $raw_file_data,
				-hybridization_date => $hybridization_date_formatted,
				-file_name => $file_name,
				-fingerprint => $fingerprint,
				);


		#Create sample if it does not already exist
		for my $hybridization_name (@$hybridization_names) {
			my $sample = $mimas_db->Upload->SampleAdaptor->select_by_expID_name($experiment->dbID, $hybridization_name) || undef;
			if (!defined $sample) { #for CEL files

				my $array;
				my $array_name = $cursor->array_name;
				if (!defined $array_name) {
				    if ($selected_array_id) {
					$array = $mimas_db->Library->ArrayAdaptor->select_by_dbID($selected_array_id);
				    }
				    else {
					return "Cannot obtain array name for sample $hybridization_name from uploaded files";
				    }
				}
				else {
					$array = $mimas_db->Library->ArrayAdaptor->select_by_design_name($array_name);
				}

				unless ($array) {
					return "Unknown array referenced in file: $array_name. Please contact a MIMAS curator so that we can include this array."; #returns from eval{}
				}
				my $sample_id = $mimas_db->Upload->SampleAdaptor->store(
						-name           => $hybridization_name,
						-array_id       => $array->dbID,
						-condition_id   => undef,
						-experiment_id  => $experiment->dbID,
						);

				$sample = $mimas_db->Upload->SampleAdaptor->select_by_dbID($sample_id);

				#create cross-reference to GEO repository (for entries imported from GEO)
				if ($hybridization_name =~ /^(GS[ME]\d+)/) {
				    my $acc = $1;

				    #create cross-reference from Sample
				    my $attribute = $mimas_db->Library->AttributeAdaptor->select_by_attr_name('Microarray data repository') or die;

				    my $attr_detail = $mimas_db->Library->AttrDetailAdaptor->select_by_attr_id_name($attribute->dbID, 'GEO accession number') or die;

				    $mimas_db->Upload->SampleAttributeAdaptor->store(
					-char_value     => $acc,
					-numeric_value  => undef,
					-attr_detail_id => $attr_detail->dbID,
					-attribute_id   => $attribute->dbID,
					-sample_id      => $sample->dbID,
				    );

				    #mark experiment as "Imported from external source"
				    my $ea = $mimas_db->Upload->ExpAttributeAdaptor->select_all_by_attr_name_expID('Microarray Facility', $experiment->dbID);
				    unless ($ea and %$ea) {
					my $attribute2 = $mimas_db->Library->AttributeAdaptor->select_by_attr_name('Microarray Facility');
					my $attr_detail2 = $mimas_db->Library->AttrDetailAdaptor->select_by_attr_id_name($attribute2->dbID, 'Imported from external source');

					$mimas_db->Upload->ExpAttributeAdaptor->store(
					    -char_value     => undef,
					    -numeric_value  => undef,
					    -attr_detail_id => $attr_detail2->dbID,
					    -attribute_id   => $attribute2->dbID,
					    -experiment_id  => $experiment->dbID,
					);
				    }
				}

			}

			#Validate sample-array link / number of probes
			eval {
				$fh->seek(0, 0);
				$cursor = $parser->parse($fh, $basename, undef);
			};
			return $@ if $@;
			my @validate_errors = $cursor->validate_on_sample($sample, $force_probesets);
			return @validate_errors if @validate_errors; #returns from eval{}


			#Store sample to file association
			my $sample_to_file_id =
			$mimas_db->Upload->SampleToFileAdaptor->store(
					-sample_id => $sample->dbID,
					-sample_file_id => $sample_file_id,
					-format => $format,
					-hybridization_name => $hybridization_name,
					-is_germonline => $is_germonline,
					);
		}

                # commit to DB
		$mimas_db->commit();

		return (); #no errors;
	};

	if ($@ or @errors) {
		push @errors, MIMAS_DB_ERROR_MSG if $@;
		$mimas_db->warn("FILE UPLOAD of '$basename.$ext' transaction aborted:\n$@");
		eval { $mimas_db->rollback() };
		return @errors;
	}
	return ();
}

sub approveCuration {
    my ($mimas_db, $experiment, $edited_user, $auth_user) =  @_;
    my $working_data = $edited_user->working_data;

    my $attr_groups      = $mimas_db->Library->AttrGroupAdaptor->select_all();
    my $attributes       = $mimas_db->Library->AttributeAdaptor->select_all();
    my $named_attributes = $mimas_db->Library->AttributeAdaptor->select_all_attrs();

    %{$attr_groups}      = map { $_->name => $_ } values %{$attr_groups};
    %{$named_attributes} = map { $_->name => $_ } values %{$named_attributes};

    my $owner_full_name = $experiment->owner->full_name_reversed;

    my $log = "";

    my $upload_approved;
    if (defined $working_data           and
        defined $working_data->{upload} and
        defined $working_data->{upload}->{$experiment->dbID}) {
        # User-defined Experimental Factors and Factor Details
        if (defined $working_data->{upload}->{$experiment->dbID}->{factors}) {
            $log .= "\n\nProcessing User-defined Factors and Factor Details...\n";
            for my $factor (sort { lc($a->{name}) cmp lc($b->{name}) } values %{$working_data->{upload}->{$experiment->dbID}->{factors}}) {
                next unless $factor->{selected};  # IMPORTANT!!
                $log .= "\nNew Factor name: $factor->{name}\n";

                # Non-Numeric Experimental Factor
                if (!$factor->{is_numeric}) {
                    my $form_type_id = $factor->{form_type_id} or die "Missing form_type_id for Experimental Factor $factor->{name}";
                    die "Invalid upload form type!" unless defined MIMAS_FORM_TYPES->{$form_type_id};

                    $log .= "creating factor '$factor->{name}'...\n";
                    my $existing_attribute = $mimas_db->Library->AttributeAdaptor->select_by_factor_name_ci($factor->{name});
                    my $attribute_id;
                    unless (defined $existing_attribute) {
                        $attribute_id = $mimas_db->Library->AttributeAdaptor->store(-name             => $factor->{name},
                            -is_attribute     => 0,
                            -is_factor        => 1,
                            -is_numeric       => $factor->{is_numeric} ? 1 : 0,
                            -required         => 'optional',
                            -other            => MIMAS_FORM_TYPES->{$form_type_id}->{upload} =~ /^select/i ? 1 : 0,
                            -none_na          => 0,
                            -search_form_type => MIMAS_FORM_TYPES->{$form_type_id}->{search},
                            -upload_form_type => MIMAS_FORM_TYPES->{$form_type_id}->{upload},
                            -description      => undef,
                            -attr_group_id    => $attr_groups->{'Experimental Factor Details'}->dbID,
                            -mage_category    => undef,
                            -mged_name        => undef,
                            -factor_group_id  => undef);

                        $mimas_db->Library->AttrDetailAdaptor->store(-name                 => $factor->{name},
                            -type                 => 'value',
                            -default              => 0,
                            -base_conv_scalar     => undef,
                            -base_conv_factor     => undef,
                            -description          => undef,
                            -link_id              => $attribute_id,
                            -attr_detail_group_id => undef,
                            -mage_name            => undef,
                            -attribute_id         => $named_attributes->{'Experimental Factors'}->dbID);
                    } else {
                        $log .= " !! WARNING: '$factor->{name}' already exists in Attribute table -- using already existing factor.\n";
                        $attribute_id = $existing_attribute->dbID;
                    }

                    # select menu experimental factor
                    if (MIMAS_FORM_TYPES->{$form_type_id}->{upload} =~ /^select/i) {
                        for my $condition_id (keys %{$factor->{values}}) {
                            my $value = $factor->{values}->{$condition_id};

                            $log .= "New factor value '$value'\n";

                            $log .= "creating value detail '$value'...\n";
                            my $existing_detail = $mimas_db->Library->AttrDetailAdaptor->select_by_attrs_ci(-name         => $value,
                                -type         => 'value',
                                -attribute_id => $attribute_id);
                            my $attr_detail_id;
                            unless (defined $existing_detail) {
                                $attr_detail_id = $mimas_db->Library->AttrDetailAdaptor->store(-name                 => $value,
                                    -type                 => 'value',
                                    -default              => 0,
                                    -base_conv_scalar     => undef,
                                    -base_conv_factor     => undef,
                                    -description          => undef,
                                    -link_id              => undef,
                                    -attr_detail_group_id => undef,
                                    -mage_name            => undef,
                                    -attribute_id         => $attribute_id);
                            } else {
                                $log .= " !! WARNING: '$value' already exists in AttrDetail table -- using already existing detail value.\n";
                                $attr_detail_id = $existing_detail->dbID;
                            }

                            $factor->{values}->{$condition_id} = $attr_detail_id;
                        }

                        $log .= "creating upload sample attributes...\n";
                        for my $condition_id (keys %{$factor->{values}}) {
                            my $attr_detail_id = $factor->{values}->{$condition_id};
                            for my $sample (values %{$experiment->conditions->{$condition_id}->samples}) {
                                $mimas_db->Upload->SampleAttributeAdaptor->store(-char_value     => undef,
                                    -numeric_value  => undef,
                                    -attr_detail_id => $attr_detail_id,
                                    -attribute_id   => $attribute_id,
                                    -sample_id      => $sample->dbID);
                            }
                        }
                    }
                    # text experimental factor
                    else {
                        $log .= "creating upload sample attributes...\n";
                        for my $condition_id (keys %{$factor->{values}}) {
                            my $value = $factor->{values}->{$condition_id};

                            $log .= "New factor value '$value'\n";

                            for my $sample (values %{$experiment->conditions->{$condition_id}->samples}) {
                                $mimas_db->Upload->SampleAttributeAdaptor->store(-char_value     => $value,
                                    -numeric_value  => undef,
                                    -attr_detail_id => undef,
                                    -attribute_id   => $attribute_id,
                                    -sample_id      => $sample->dbID);
                            }
                        }
                    }
                }
                # Numeric Experimental Factor
                else {
                    $log .= "creating factor '$factor->{name}'...\n";
                    my $existing_attribute = $mimas_db->Library->AttributeAdaptor->select_by_factor_name_ci($factor->{name});
                    my $attribute_id;
                    unless (defined $existing_attribute) {
                        $attribute_id = $mimas_db->Library->AttributeAdaptor->store(-name             => $factor->{name},
                            -is_attribute     => 0,
                            -is_factor        => 1,
                            -is_numeric       => $factor->{is_numeric},
                            -required         => 'optional',
                            -other            => 0,
                            -none_na          => 0,
                            -search_form_type => 'text',
                            -upload_form_type => 'text',
                            -description      => undef,
                            -attr_group_id    => $attr_groups->{'Experimental Factor Details'}->dbID,
                            -mage_category    => undef,
                            -mged_name        => undef,
                            -factor_group_id  => undef);

                        $mimas_db->Library->AttrDetailAdaptor->store(-name                 => $factor->{name},
                            -type                 => 'value',
                            -default              => 0,
                            -base_conv_scalar     => undef,
                            -base_conv_factor     => undef,
                            -description          => undef,
                            -link_id              => $attribute_id,
                            -attr_detail_group_id => undef,
                            -mage_name            => undef,
                            -attribute_id         => $named_attributes->{'Experimental Factors'}->dbID);
                    } else {
                        $log .= " !! WARNING: '$factor->{name}' already exists in Attribute table -- using already existing factor.\n";
                        $attribute_id = $existing_attribute->dbID;
                    }

                    # numeric experimental factor with units
                    if (defined $factor->{units}) {
                        for my $unit (values %{$factor->{units}}) {
                            # no need to alter units because these are not entered by user
                            #
                            # print "Alter factor unit '$unit->{name}'? (Y/N): ";
                            # chomp(my $answer = <STDIN>);
                            # if (lc($answer) eq 'y') {
                            #     print "New factor unit: ";
                            #     $unit->{name} = <STDIN>;
                            #     $unit->{name} =~ s/^\s+//;
                            #     $unit->{name} =~ s/\s+$//;
                            #     $unit->{name} =~ s/\s+/ /g;
                            # }

                            $log .= "creating unit detail '$unit->{name}'...\n";
                            my $existing_detail = $mimas_db->Library->AttrDetailAdaptor->select_by_attrs_ci(-name         => $unit->{name},
                                -type         => 'unit',
                                -attribute_id => $attribute_id);
                            my $attr_detail_id;
                            unless (defined $existing_detail) {
                                $attr_detail_id = $mimas_db->Library->AttrDetailAdaptor->store(-name                 => $unit->{name},
                                    -type                 => 'unit',
                                    -default              => $unit->{default} ? 1 : 0,
                                    -base_conv_scalar     => $unit->{base_conv_scalar},
                                    -base_conv_factor     => $unit->{base_conv_factor},
                                    -description          => undef,
                                    -link_id              => undef,
                                    -attr_detail_group_id => undef,
                                    -mage_name            => undef,
                                    -attribute_id         => $attribute_id);
                            } else {
                                $log .= " !! WARNING: '$unit->{name}' already exists in AttrDetail table -- using already existing detail unit.\n";
                                $attr_detail_id = $existing_detail->dbID;
                            }

                            $unit->{attr_detail_id} = $attr_detail_id;
                        }

                        $log .= "creating upload sample attributes...\n";
                        for my $condition_id (keys %{$factor->{values}}) {
                            my $value = $factor->{values}->{$condition_id};
                            my $attr_detail_id;
                            for my $unit (values %{$factor->{units}}) {
                                if (defined $unit->{selected} and $unit->{selected}->{$condition_id}) {
                                    $attr_detail_id = $unit->{attr_detail_id};
                                    last;
                                }
                            }

                            for my $sample (values %{$experiment->conditions->{$condition_id}->samples}) {
                                $mimas_db->Upload->SampleAttributeAdaptor->store(-char_value     => undef,
                                    -numeric_value  => $value,
                                    -attr_detail_id => $attr_detail_id,
                                    -attribute_id   => $attribute_id,
                                    -sample_id      => $sample->dbID);
                            }
                        }
                    }
                    # numeric experimental factor without units
                    else {
                        $log .= "creating upload sample attributes...\n";
                        for my $condition_id (keys %{$factor->{values}}) {
                            my $value = $factor->{values}->{$condition_id};
                            for my $sample (values %{$experiment->conditions->{$condition_id}->samples}) {
                                $mimas_db->Upload->SampleAttributeAdaptor->store(-char_value     => undef,
                                    -numeric_value  => $value,
                                    -attr_detail_id => undef,
                                    -attribute_id   => $attribute_id,
                                    -sample_id      => $sample->dbID);
                            }
                        }
                    }
                }
            }
        }

        # User-defined Attribute Details
        if (defined $working_data->{upload}->{$experiment->dbID}->{details}) {
            $log .= "\n\nProcessing User-defined Attribute Details...\n";
            for my $detail (sort { $a->{attribute_id} <=> $b->{attribute_id} } values %{$working_data->{upload}->{$experiment->dbID}->{details}}) {
                my $selected_exists;
                if (defined $detail->{values}) {
                    for my $value (values %{$detail->{values}}) {
                        if ($value->{selected}) { $selected_exists++; last }
                    }
                }
                if (defined $detail->{units}) {
                    for my $unit (values %{$detail->{units}}) {
                        if ($unit->{selected}) { $selected_exists++; last }
                    }
                }

                if ($selected_exists) {
                    my $attribute_id = $detail->{attribute_id};
                    # special case for "Experimental Factors" -- already added attribute details above
                    # next if $attribute_id == $named_attributes->{'Experimental Factors'}->dbID;

                    $log .= "\nAttribute: ". $attributes->{$attribute_id}->name. "\n";
                    if (defined $detail->{values}) {
                        for my $value (values %{$detail->{values}}) {
                            next unless $value->{selected};  # IMPORTANT!!

                            $log .= "New attribute value '$value->{name}'\n";

                            $log .= "creating value detail '$value->{name}'...\n";
                            my $existing_detail = $mimas_db->Library->AttrDetailAdaptor->select_by_attrs_ci(-name         => $value->{name},
                                -type         => 'value',
                                -attribute_id => $attribute_id);
                            my $attr_detail_id;
                            unless (defined $existing_detail) {
                                $attr_detail_id = $mimas_db->Library->AttrDetailAdaptor->store(-name                 => $value->{name},
                                    -type                 => 'value',
                                    -default              => 0,
                                    -base_conv_scalar     => undef,
                                    -base_conv_factor     => undef,
                                    -description          => undef,
                                    -link_id              => undef,
                                    -attr_detail_group_id => undef,
                                    -mage_name            => undef,
                                    -attribute_id         => $attribute_id);
                            } else {
                                $log .= " !! WARNING: '$value->{name}' already exists in AttrDetail table -- using already existing detail value.\n";
                                $attr_detail_id = $existing_detail->dbID;
                            }

                            # Experiment Attributes
                            if ($attributes->{$attribute_id}->upload_web_page eq 'experiment information') {
                                $log .= "creating upload experimental attribute...\n";
                                $mimas_db->Upload->ExpAttributeAdaptor->store(-char_value     => undef,
                                    -numeric_value  => undef,
                                    -attr_detail_id => $attr_detail_id,
                                    -attribute_id   => $attribute_id,
                                    -experiment_id  => $experiment->dbID);
                            }
                            # Sample Attributes
                            else {
                                $log .= "creating upload sample attributes...\n";
                                for my $sample_id (keys %{$value->{selected}}) {
                                    $mimas_db->Upload->SampleAttributeAdaptor->store(-char_value     => undef,
                                        -numeric_value  => undef,
                                        -attr_detail_id => $attr_detail_id,
                                        -attribute_id   => $attribute_id,
                                        -sample_id      => $sample_id);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    # commit to DB
    $log .= "\nPlacing experiment in MIMAS Repository loading queue...";
    $mimas_db->Upload->ExperimentAdaptor->update(-set        => [
        -state         => MIMAS_UPLOAD_IN_REPOSITORY,
        -curator_id    => $auth_user->dbID,
        ],
        -qualifiers => [ -experiment_id => $experiment->dbID   ]);

    $log .= "\nCleaning up user experiment working data...";
    if (defined $working_data           and
        defined $working_data->{upload} and
        defined $working_data->{upload}->{$experiment->dbID}) {
        delete $working_data->{upload}->{$experiment->dbID};
        delete $working_data->{upload} unless %{$working_data->{upload}};
        $working_data = undef          unless %{$working_data};

        $mimas_db->User->UserAdaptor->update(-set        => [ -working_data => $working_data            ],
            -qualifiers => [ -user_id      => $experiment->owner->dbID ]);
    }
    return $log;

}



sub needs_curation {
    my ($edited_user, $experiment) = @_;
    return 1 unless $experiment->curator;

    my $working_data   = $edited_user->working_data;
    my $has_working_data = defined $working_data           &&
    defined $working_data->{upload} &&
    defined $working_data->{upload}->{$experiment->dbID};

    return $has_working_data ? 1 : 0;
}


sub mergeable_samples {
    my @mergeable_samples;
    my ($src_samples, $dst_samples, $file_exts) = @_;
    SAMPLE1:
    for my $sample (values %{$src_samples}) {
        next unless !$sample->attrs_exist && $sample->files;
        SAMPLE2:
        for my $sample2 (sort {lc $a->name cmp lc $b->name} values %{$dst_samples}) {
            next if $sample2->dbID eq $sample->dbID;
            for my $ext1 (keys %{$file_exts->{$sample->dbID}}) {
                next SAMPLE2 if exists $file_exts->{$sample2->dbID}->{$ext1};
            }
            push @mergeable_samples, $sample2;
        }
    }
    return @mergeable_samples;
}
