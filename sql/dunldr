#!/usr/bin/env perl

=head1 dunldr

unload data from an oracle database

use 'dunldr -help' for help on usage

jared still
10/24/2001

improved by Alexandre Gattiker Dec 2006

=cut

use warnings;
use FileHandle;
use DBI;
use strict;
use File::Path;
use IO::File;
use Data::Dumper;
use sigtrap qw(handler sig_handler normal-signals error-signals ALRM);
use Encode;

sub sig_handler {
    die "\n$0 died, received signal @_ [", scalar localtime, "]\n\n";
}

use Getopt::Long;

our %optctl = ();
our %opt_bincol = ();
our %opt_lobcol = ();
our %hexcols = ();
our %lobcols = ();

unless (
Getopt::Long::GetOptions( \%optctl,
"database=s",
"username=s",
"password=s",
"owner=s",
"directory=s",
"mysql!",
"lang=s",
"dateformat=s",
"header!",
"schemadump!",
"longlen=i",
"rowlimit=i",
"table=s@",
"bincol=s" => \%opt_bincol,
"lobcol=s" => \%opt_lobcol,
"sysdba!",
"sysoper!",
"rs=s",
"z","h","help"
)


) { Usage(1); }

if ($optctl{lang}) {
    $ENV{NLS_LANG} = $optctl{lang};
}

unless (defined $ENV{NLS_LANG}) {
    warn "WARNING: \$NLS_LANG is not defined.";
}

for my $table ( keys %opt_bincol ) {
    my @cols = split(/\,/,$opt_bincol{$table});
    $hexcols{uc($table)} = \@cols;
}

for my $table ( keys %opt_lobcol ) {
    my @cols = split(/\,/,$opt_lobcol{$table});
    $lobcols{uc($table)} = \@cols;
}


our($db, $username, $password, $connectionMode);

$connectionMode = 0;
if ( $optctl{sysoper} ) { $connectionMode = 4 } if ( $optctl{sysdba} ) { $connectionMode = 2 }

Usage(1) unless $optctl{database};
Usage(1) unless $optctl{username};
Usage(1) unless $optctl{password};
Usage(1) unless $optctl{owner};


$optctl{longlen} = 65535 unless $optctl{longlen};

if ( $optctl{h} || $optctl{z} || $optctl{help} ) {

Usage(0);
}

if ( $optctl{schemadump} ) {

$optctl{table} = ['SCHEMADUMP'];
} else {

Usage(1) unless $optctl{table};
}

# default hdr to off
$optctl{header} ||= 0;

#if ( $optctl{bincol} ) {
#}

$username=$optctl{username};
$password = $optctl{password};
$db = $optctl{database};

our $rs = defined($optctl{rs}) ? $optctl{rs} : '\n';
our $rs0 = $rs;
for ($rs0) {
    s/\\n/\n/;
    s/\\r/\r/;
}


# create the working directory
unless ( $optctl{directory} ) {

    $optctl{directory} = qq!$optctl{owner}.dump!;
}

# create directory path if it doesn't exist -d $optctl{directory} || File::Path::mkpath([$optctl{directory}]);

our $dbh = DBI->connect( 'dbi:Oracle:' . $db, $username, $password, 
    {
        RaiseError => 1,
        AutoCommit => 0,
        ora_session_mode => $connectionMode
    }
);

die "Connect to $db failed \n" unless $dbh;

$dbh->{LongReadLen} = $optctl{longlen};

# set Oracle NLS date format
if ( $optctl{dateformat} ) {
    $dbh->do("alter session set nls_date_format = '$optctl{dateformat}'" );
}

my $tableHash = new Tables($dbh, \%optctl);

my $sth;


my $type_info_all = $dbh->type_info_all;
my $type_info_hash = shift @$type_info_all;
my %num2type;
for my $type_info (@$type_info_all) {
    my $hash = {};
    while (my ($k, $v) = each %$type_info_hash) {
        $hash->{$k} = $type_info->[$v];
    }
    my $type_num = $hash->{DATA_TYPE} or die "FATAL: inconsistency in DBI::type_info_all output";
    $num2type{$type_num} = $hash;
}


# take a dump
for my $table ( keys %{$tableHash} ){

    warn "Table: $table\n";

    my $sql = qq!select * from $optctl{owner}\.$table!;

    if ( $optctl{rowlimit}){
        $sql .= qq! where rownum <= $optctl{rowlimit}!;
    }

    $sth = $dbh->prepare($sql);

    my @columns = @{$sth->{NAME_uc}};
    my @column_types = map {$num2type{$_} || undef} @{$sth->{TYPE}};

    my %colOrder = ();
    for my $el ( 0 ..$#columns ) {
        $colOrder{$columns[$el]} = $el;
    }

    my $dumpFile = $optctl{directory} . '/' . $tableHash->{$table} . '.txt';
    open(DUMP, "> $dumpFile") || die "could not create file $dumpFile - $!\n";
    binmode DUMP;

    if ( $optctl{header} ) {
        print DUMP join(',',@columns),"\n";
    }

    $sth->execute;

    # create the ctl and par files
    Tables->createCtl(
        TABLE => $table,
        COLUMNS => \@columns,
        COLTYPES => \@column_types,
        RS => $rs,
        DUMPFILE => $tableHash->{$table} . '.txt',
        DIRECTORY => $optctl{directory},
        SCHEMA => $optctl{owner},
        HEXCOLS => \@{$hexcols{$table}},
        LOBCOLS => \@{$lobcols{$table}},
        MYSQL => $optctl{mysql},
        COLORDER => \%colOrder
    );

    # turn warnings off here so that warnings are not
    # reported for null columns when printed
    # comment it out to see what I mean
    no warnings;
    my $id = 1;
    while ( my $ary = $sth->fetchrow_arrayref ) {
        # change column to hex if specified as binary via -bincol arg
        if ( exists $hexcols{$table} ) {
            for my $hexdumpcol ( @{$hexcols{$table}} ) {
                $ary->[$colOrder{uc($hexdumpcol)}] = 
                uc(unpack("H*",$ary->[$colOrder{uc($hexdumpcol)}]));
            }
        }
        # change column to hex if specified as binary via -bincol arg
        if ( exists $lobcols{$table} ) {
            for my $lobdumpcol ( @{$lobcols{$table}} ) {
                my $value = $ary->[$colOrder{uc($lobdumpcol)}];
                if (defined $value) {
                    my $lobFileN = $tableHash->{$table} . '.lob.' . $id++;
                    my $lobFile = $optctl{directory} . '/' . $lobFileN;
                    open(LOB, "> $lobFile") || die "could not create file $lobFile - $!\n";
                    if ( Encode::is_utf8($value)) {
                        $value = Encode::encode_utf8($value);
                    }
                    print LOB $value;
                    close LOB || die "could not create file $lobFile - $!\n";

                    $ary->[$colOrder{uc($lobdumpcol)}] = "$lobFileN";
                }
            else {
                $ary->[$colOrder{uc($lobdumpcol)}] = "NONE";
            }
            }
        }
        #From sqlldr docs:
        #"Sometimes the punctuation mark that is a delimiter must also be
        #included in the data. To make that possible, two adjacent delimiter
        #characters are interpreted as a single occurrence of the character, and
        #this character is included in the data."
        if (!$optctl{mysql}) {
        print DUMP q!"! .
        join(
            q!","! ,
            map {
                s/"/""/g;
                if ( Encode::is_utf8($_)) {
                    $_ = Encode::encode_utf8($_);
                }
                if (/\Q$rs0/o) {
                    die "FATAL: a record contains record separator '$rs'.";
                }
                $_;
            }
            @{$ary}
            ) .
        qq!"! . $rs0;
        }
        else {
        print DUMP
        join(
            q!,! ,
            map {
                if (defined $_) {
                #List of chars to be escaped: NUL, \, ', "
                #(from <http://dev.mysql.com/doc/refman/5.0/en/string-syntax.html>)
                s/([\\"'])/\\$1/g;
                s/\0/\\0/g;

                #These characters are escaped by the 'mysqldump' command, but
                #this is not required according to the spec.
                #s/\032/\\Z/g;
                #s/\012/\\n/g;
                #s/\015/\\r/g;

                if ( Encode::is_utf8($_)) {
                    $_ = Encode::encode_utf8($_);
                }

                '"' . $_ . '"';
                }
                else {
                    '\N';
                }
            }
            @{$ary}
            ) .
        qq!\n!;
        }
    }
    use warnings;
    close DUMP;


}

$sth->finish;
$dbh->disconnect;

sub Usage {

my ($exitCode) = @_;

print q{

dunldr - data unloader for Oracle

usage:

dunldr -database <database> -username <userid> -password <password> \

-directory <data unload directory> \
-header|noheader \
-owner <schema owner> \
-table <table1,table2,table3,...)


-database        database name

-username        user to login as

-password        password for login user

-owner           owner of tables to dump

-directory       directory to unload data into
will default to <owner>.dump

-lang            Oracle NLS_LANG setting - optional
-dateformat      Oracle NLS date format - optional

-header|noheader should first line include column names?

-table           table to dump.  may be repeated as many
times as necessary.

-schemadump      dump entire schema of <owner>
will ignore -table settings

-rowlimit        limit number of rows returned

-longlen         if longs are in the table, set this
to the maximum length you want.
defaults to 65535

-bincol          use to specify columns that should be dumped
in hex format.  columns with binary data tend
to cause problems in text dumps.
usage: -bincol <table_name>=<column_name,column_name,...>

-lobcol          use to specify columns that should be dumped
in into separate files. Alternative to -bincol to avoid ending
up with a huge dump file.
usage: -lobcol <table_name>=<column_name,column_name,...>

-rs              specify a record separator (instead of '\n').
                 REQUIRED if any text values contain newlines
                 and are not handled as -bincol or -lobcol.
usage: -rs '|\n'


Examples:

dunldr -database orcl -username system -password manager \

-owner scott -directory scott.tables \
-header \
-table emp \
-table dept \
-table sales


dunldr -database orcl -username system -password manager \

-owner scott \
-dateformat 'mm/dd/yyyy' \
-header \
-schemadump \
-bincol xml_data=payload,header,authorization \
-bincol app_notes=text



};

exit $exitCode ? $exitCode : 0;
}

package Tables;

sub new {

    my $pkg = shift;
    my $class = ref($pkg) || $pkg;

    my ( $dbh, $optionHash ) = @_;

    my $tableHash;
    if ( grep(/^SCHEMADUMP$/, @{$optionHash->{table}} ) ) {
        # get all tables of owner
        my $sql = q!
        select table_name
        from all_tables
        where owner = ?
        !;
        my $sth = $dbh->prepare($sql);
        $sth->execute(uc($optionHash->{owner}));
        my @tableArray;
        while( my $ary = $sth->fetchrow_arrayref ) {
            push(@tableArray, $ary->[0]);
        }
        $tableHash = setTables(\@tableArray);
    } else {
        $tableHash = setTables(\@{$optionHash->{table}});
    }

    bless $tableHash, $class;
    return $tableHash;


}

=head1 setTables

make a neat hash of the form TABLE_NAME => 'table_name.dump'   all table names upper case, all file names lower case   for dump file names - Perl is awesome

=cut

sub setTables {

    my ($tableArray) = shift;

    my %tables = map(
        split(/:/, $_),
        map(
            $_.':'.lc($_),
            split(
                /:/,
                uc(join(':',@{$tableArray}))
            )
        )
    );

    my $hashRef = \%tables;
    return $hashRef;
}

sub createCtl {
    my($self,%args) = @_;
    my @columns = @{$args{COLUMNS}};
    my @coltypes = @{$args{COLTYPES}};
    my %colOrder = %{$args{COLORDER}};
    if ( $args{HEXCOLS} ) {
        for my $hexdumpcol ( @{$args{HEXCOLS}} ) {
            $columns[$colOrder{uc($hexdumpcol)}] =
            $columns[$colOrder{uc($hexdumpcol)}] .
            "\"hex_to_raw(:$columns[$colOrder{uc($hexdumpcol)}])\"";
        }
    }
    if ( $args{LOBCOLS} ) {
        my $colid = 1;
        for my $lobdumpcol ( @{$args{LOBCOLS}} ) {
            my $idl = $colid++;
            $columns[$colOrder{uc($lobdumpcol)}] =
            "lob_file$idl FILLER char, " .
            $columns[$colOrder{uc($lobdumpcol)}] .
            " LOBFILE(lob_file$idl) TERMINATED BY EOF NULLIF lob_file$idl = 'NONE' ";
        }
    }

    for (my $i = 0; $i<@columns; $i++) {
        my $column = $columns[$i];
        my $coltype = $coltypes[$i] or next;
        if ($coltype->{TYPE_NAME} eq 'VARCHAR2' and !$args{MYSQL}) {
            my $len = $coltype->{COLUMN_SIZE} or die "FATAL: inconsistency with DBI::type_info_all";
            #sqlldr will refuse to load large VARCHAR2 columns (e.g. of length 4000)
            #if the length is not specified in the ctl file (using the CHAR type). Bummer.
            $columns[$i] .= " CHAR($len)";
        }
    }

    if (!$args{MYSQL}) {
    my $ctlFile = $args{DIRECTORY}. '/' . lc($args{TABLE}) . '.ctl';
    my $ctlFh = new IO::File();
    $ctlFh->open("> $ctlFile") || die "cannot create file $ctlFile - $!\n";
    $ctlFh->print("load data\n");
    $ctlFh->print("infile '$args{DUMPFILE}' \"str '$args{RS}'\"\n");
    $ctlFh->print("into table $args{TABLE}\n");
    $ctlFh->print(q!fields terminated by ',' optionally enclosed by '"'!. "\n");
    $ctlFh->print("(\n");
    $ctlFh->print( "\t" . join(",\n\t",@columns) . "\n");
    $ctlFh->print(")\n");
    $ctlFh->close;

    my $parFile = $args{DIRECTORY}. '/' . lc($args{TABLE}) . '.par';
    my $parFh = new IO::File();
    $parFh->open("> $parFile") || die "cannot create file $parFile - $!\n";
    $parFh->print("userid = $args{SCHEMA}\n");
    $parFh->print("control = " . lc($args{TABLE}) . ".ctl\n");
    $parFh->print("log = " . lc($args{TABLE}) . ".log\n");
    $parFh->print("bad = " . lc($args{TABLE}) . ".bad\n");
    $parFh->close;

}
else {

    my $mysFile = $args{DIRECTORY}. '/' . lc($args{TABLE}) . '.sql';
    my $mysFh = new IO::File();
    $mysFh->open("> $mysFile") || die "cannot create file $mysFile - $!\n";
    $mysFh->print("SET NAMES 'utf8';\n");
    $mysFh->print("load data\n");
    $mysFh->print("local infile '$args{DUMPFILE}'\n");
    $mysFh->print("into table " . lc($args{TABLE}) . "\n");
    $mysFh->print(q!fields terminated by ',' optionally enclosed by '"'!. "\n");
    $mysFh->print("(\n");
    $mysFh->print( "\t" . join(",\n\t",@columns) . "\n");
    $mysFh->print(");\n");
    $mysFh->print("SHOW WARNINGS;\n");
    $mysFh->close;

}
}
